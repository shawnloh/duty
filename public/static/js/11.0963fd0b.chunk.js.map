{"version":3,"sources":["pages/loading/LoadingPage.jsx","pages/loading/index.js"],"names":["LoadingPage","this","props","loadApp","appLoaded","isAuthenticated","isLoading","to","exact","Container","className","Row","Spinner","type","color","PureComponent","mapDispatchToProps","loadAppAction","connect","state","pages","loading","get","auth"],"mappings":"uOAOMA,E,4LACiB,IAAD,EAC8BC,KAAKC,MAA7CC,EADU,EACVA,QAASC,EADC,EACDA,UAAWC,EADV,EACUA,iBACvBD,GAAaC,GAChBF,M,+BAIM,IAAD,EAC0BF,KAAKC,MAA9BI,EADD,EACCA,UAAWF,EADZ,EACYA,UACnB,OAAKE,GAAaF,EACT,kBAAC,IAAD,CAAUG,GAAG,aAAaC,OAAK,IAGtC,kBAACC,EAAA,EAAD,CAAWC,UAAU,sEACnB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASC,KAAK,OAAOC,MAAM,YAC3B,kBAACF,EAAA,EAAD,CAASC,KAAK,OAAOC,MAAM,cAC3B,kBAACF,EAAA,EAAD,CAASC,KAAK,OAAOC,MAAM,YAC3B,kBAACF,EAAA,EAAD,CAASC,KAAK,OAAOC,MAAM,WAC3B,kBAACF,EAAA,EAAD,CAASC,KAAK,OAAOC,MAAM,YAC3B,kBAACF,EAAA,EAAD,CAASC,KAAK,OAAOC,MAAM,SAC3B,kBAACF,EAAA,EAAD,CAASC,KAAK,OAAOC,MAAM,UAE7B,kBAACH,EAAA,EAAD,iC,GAxBkBI,iBA2CpBC,EAAqB,CACzBb,QAASc,KAGIC,eAVS,SAAAC,GAAK,MAAK,CAChCb,UAAWa,EAAMC,MAAMC,QAAQC,IAAI,aACnClB,UAAWe,EAAMC,MAAMC,QAAQC,IAAI,aACnCjB,gBAAiBc,EAAMI,KAAKD,IAAI,sBAOMN,EAAzBE,CAA6ClB,GCpD7CA","file":"static/js/11.0963fd0b.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Container, Row, Spinner } from 'reactstrap';\nimport { loadApp as loadAppAction } from './actions';\n\nclass LoadingPage extends PureComponent {\n  componentDidMount() {\n    const { loadApp, appLoaded, isAuthenticated } = this.props;\n    if (!appLoaded && isAuthenticated) {\n      loadApp();\n    }\n  }\n\n  render() {\n    const { isLoading, appLoaded } = this.props;\n    if (!isLoading && appLoaded) {\n      return <Redirect to=\"/dashboard\" exact />;\n    }\n    return (\n      <Container className=\"d-flex h-100 justify-content-center align-items-center flex-column\">\n        <Row>\n          <Spinner type=\"grow\" color=\"primary\" />\n          <Spinner type=\"grow\" color=\"secondary\" />\n          <Spinner type=\"grow\" color=\"success\" />\n          <Spinner type=\"grow\" color=\"danger\" />\n          <Spinner type=\"grow\" color=\"warning\" />\n          <Spinner type=\"grow\" color=\"info\" />\n          <Spinner type=\"grow\" color=\"dark\" />\n        </Row>\n        <Row>Loading Application</Row>\n      </Container>\n    );\n  }\n}\n\nLoadingPage.propTypes = {\n  loadApp: PropTypes.func.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  appLoaded: PropTypes.bool.isRequired,\n  isAuthenticated: PropTypes.bool.isRequired\n};\n\nconst mapStateToProps = state => ({\n  isLoading: state.pages.loading.get('isLoading'),\n  appLoaded: state.pages.loading.get('appLoaded'),\n  isAuthenticated: state.auth.get('isAuthenticated')\n});\n\nconst mapDispatchToProps = {\n  loadApp: loadAppAction\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoadingPage);\n","import LoadingPage from './LoadingPage';\n\nexport default LoadingPage;\n"],"sourceRoot":""}