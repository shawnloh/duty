{"version":3,"sources":["hooks/useReduxPageSelector.js","pages/loading/LoadingPage.jsx","pages/loading/index.js"],"names":["useReduxPageSelector","pages","selector","useSelector","storeState","get","reduce","storePages","page","Map","memo","appLoaded","appLoadedFailure","isLoading","taskLoading","dispatch","useDispatch","loadApplication","useCallback","loadApp","useEffect","to","exact","Helmet","Container","className","Row","Col","Button","color","onClick","progress","Progress","animated","value"],"mappings":"iHAAA,mBAqBeA,IAlBf,SAA8BC,EAAOC,GAenC,OAdcC,aAAY,SAAAC,GACxB,MAAqB,kBAAVH,EACFG,EAAWH,MAAMA,GAAOI,IAAIH,GAEnBD,EAAMK,QAAO,SAACC,EAAYC,GAC1C,OAAID,GAAmC,cAArBA,EAAWC,GACpBD,EAAWC,GAEbC,kBACNL,EAAWH,OAEGI,IAAIH,Q,kJCqDVQ,sBA5Df,WACE,IAAMF,EAAO,UACPG,EAAYX,YAAqBQ,EAAM,aACvCI,EAAmBZ,YAAqBQ,EAAM,oBAC9CK,EAAYb,YAAqBQ,EAAM,aACvCM,EAAcd,YAAqBQ,EAAM,eACzCO,EAAWC,cAEXC,EAAkBC,uBAAY,WAClC,OAAOH,EAASI,iBACf,CAACJ,IAQJ,GANAK,qBAAU,WACHT,GAAcE,GACjBI,MAED,CAACN,EAAWI,EAAUF,EAAWI,KAE/BJ,GAAaF,GAA6B,IAAhBG,IAAsBF,EACnD,OAAO,kBAAC,IAAD,CAAUS,GAAG,aAAaC,OAAK,IAGxC,GAAIV,EACF,OACE,oCACE,kBAACW,EAAA,OAAD,KACE,kDAEF,kBAACC,EAAA,EAAD,CAAWC,UAAU,SACnB,kBAACC,EAAA,EAAD,CAAKD,UAAU,SACb,kBAACE,EAAA,EAAD,CAAKF,UAAU,mBACb,uBAAGA,UAAU,eAAb,8BACA,kBAACG,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAASb,GAAjC,cAUZ,IAAMc,EAAY,EAAIjB,EAAe,IACrC,OACE,oCACE,kBAACS,EAAA,OAAD,KACE,kDAEF,kBAACC,EAAA,EAAD,CAAWC,UAAU,SACnB,kBAACC,EAAA,EAAD,CAAKD,UAAU,SACb,kBAACE,EAAA,EAAD,CAAKF,UAAU,mBACb,kBAACO,EAAA,EAAD,CAAUC,UAAQ,EAACC,MAAOH,IAC1B,uBAAGN,UAAU,eAAb,8BC5DZ","file":"static/js/15.8f558955.chunk.js","sourcesContent":["import { useSelector } from 'react-redux';\nimport { Map } from 'immutable';\n\nfunction useReduxPageSelector(pages, selector) {\n  const state = useSelector(storeState => {\n    if (typeof pages === 'string') {\n      return storeState.pages[pages].get(selector);\n    }\n    const foundPage = pages.reduce((storePages, page) => {\n      if (storePages && storePages[page] !== 'undefined') {\n        return storePages[page];\n      }\n      return Map();\n    }, storeState.pages);\n\n    return foundPage.get(selector);\n  });\n\n  return state;\n}\n\nexport default useReduxPageSelector;\n","import React, { memo, useEffect, useCallback } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { Container, Row, Button, Progress, Col } from 'reactstrap';\nimport { Helmet } from 'react-helmet';\nimport { loadApp } from './actions';\nimport useReduxPageSelector from '../../hooks/useReduxPageSelector';\n\nfunction LoadingPage() {\n  const page = 'loading';\n  const appLoaded = useReduxPageSelector(page, 'appLoaded');\n  const appLoadedFailure = useReduxPageSelector(page, 'appLoadedFailure');\n  const isLoading = useReduxPageSelector(page, 'isLoading');\n  const taskLoading = useReduxPageSelector(page, 'taskLoading');\n  const dispatch = useDispatch();\n\n  const loadApplication = useCallback(() => {\n    return dispatch(loadApp());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (!appLoaded && !isLoading) {\n      loadApplication();\n    }\n  }, [appLoaded, dispatch, isLoading, loadApplication]);\n\n  if (!isLoading && appLoaded && taskLoading === 0 && !appLoadedFailure) {\n    return <Redirect to=\"/dashboard\" exact />;\n  }\n\n  if (appLoadedFailure) {\n    return (\n      <>\n        <Helmet>\n          <title>Loading App...</title>\n        </Helmet>\n        <Container className=\"h-100\">\n          <Row className=\"h-100\">\n            <Col className=\"my-auto mx-auto\">\n              <p className=\"text-center\">ERROR LOADING APPLICATION.</p>\n              <Button color=\"primary\" onClick={loadApplication}>\n                Retry?\n              </Button>\n            </Col>\n          </Row>\n        </Container>\n      </>\n    );\n  }\n\n  const progress = (1 / taskLoading) * 100;\n  return (\n    <>\n      <Helmet>\n        <title>Loading App...</title>\n      </Helmet>\n      <Container className=\"h-100\">\n        <Row className=\"h-100\">\n          <Col className=\"my-auto mx-auto\">\n            <Progress animated value={progress} />\n            <p className=\"text-center\">Loading Application</p>\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n}\n\nexport default memo(LoadingPage);\n","export { default } from './LoadingPage';\n"],"sourceRoot":""}