{"version":3,"sources":["components/ranks/RanksTable.jsx","components/ranks/RankModalEdit.jsx","components/ranks/RankModalDelete.jsx","components/ranks/RankModalAdd.jsx","pages/ranks/Ranks.jsx","pages/ranks/index.js"],"names":["RankTable","ranks","toggle","modes","Table","striped","responsive","className","style","width","map","rank","key","_id","name","Button","color","onClick","UPDATE","DELETE","RankModalEdit","onCancel","onSave","onToggle","showModal","onChangeText","Modal","isOpen","ModalHeader","ModalBody","FormGroup","Label","for","Input","type","id","placeholder","onChange","ModalFooter","RankModalDelete","onDelete","RankModalAdd","ADD","Ranks","props","handleUpdate","modifyRank","updateRank","state","selectedId","newName","toggleModal","handleDelete","removeRank","deleteRank","handleAdd","createRank","addRank","handleChange","e","target","value","setState","mode","prevState","showErrors","errors","Row","error","Alert","getModal","modal","this","ids","actionInProgress","shownRanks","AppLayout","Helmet","Container","length","Spinner","size","Col","xs","md","RanksTable","PureComponent","mapDispatchToProps","connect","get","pages"],"mappings":"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","file":"static/js/13.0fe62229.chunk.js","sourcesContent":["import React from 'react';\nimport { Table, Button } from 'reactstrap';\nimport PropTypes from 'prop-types';\n\nconst RankTable = ({ ranks, toggle, modes }) => {\n  return (\n    <Table striped responsive>\n      <thead>\n        <tr>\n          <th className=\"text-center\" style={{ width: '50%' }}>\n            Name\n          </th>\n          <th className=\"text-center\">Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        {ranks.map(rank => {\n          return (\n            <tr key={rank._id}>\n              <td className=\"text-center\">{rank.name}</td>\n              <td className=\"text-center\">\n                <Button\n                  color=\"primary\"\n                  onClick={() => toggle(modes.UPDATE, rank._id)}\n                >\n                  Edit\n                </Button>{' '}\n                <Button\n                  onClick={() => toggle(modes.DELETE, rank._id)}\n                  color=\"danger\"\n                >\n                  Delete\n                </Button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </Table>\n  );\n};\n\nRankTable.propTypes = {\n  ranks: PropTypes.arrayOf(\n    PropTypes.shape({\n      _id: PropTypes.string,\n      name: PropTypes.string\n    })\n  ).isRequired,\n  toggle: PropTypes.func.isRequired,\n  modes: PropTypes.shape({\n    UPDATE: PropTypes.string.isRequired,\n    DELETE: PropTypes.string.isRequired,\n    ADD: PropTypes.string.isRequired\n  }).isRequired\n};\n\nexport default RankTable;\n","import React from 'react';\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  FormGroup,\n  Label,\n  Input\n} from 'reactstrap';\nimport PropTypes from 'prop-types';\n\nconst RankModalEdit = ({\n  onCancel,\n  onSave,\n  onToggle,\n  showModal,\n  onChangeText,\n  rank\n}) => {\n  return (\n    <Modal isOpen={showModal} toggle={() => onToggle()}>\n      <ModalHeader toggle={() => onToggle()}>Updating for {rank}</ModalHeader>\n      <ModalBody>\n        <FormGroup>\n          <Label for=\"rankName\">New name for {rank}</Label>\n          <Input\n            type=\"text\"\n            name=\"rankName\"\n            id=\"rankName\"\n            placeholder={rank}\n            onChange={onChangeText}\n          />\n        </FormGroup>\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"success\" onClick={onSave}>\n          Save\n        </Button>\n        <Button color=\"secondary\" onClick={() => onCancel()}>\n          Cancel\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n};\n\nRankModalEdit.propTypes = {\n  onCancel: PropTypes.func.isRequired,\n  onSave: PropTypes.func.isRequired,\n  onToggle: PropTypes.func.isRequired,\n  showModal: PropTypes.bool.isRequired,\n  onChangeText: PropTypes.func.isRequired,\n  rank: PropTypes.string.isRequired\n};\n\nexport default RankModalEdit;\n","import React from 'react';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\nimport PropTypes from 'prop-types';\n\nconst RankModalDelete = ({ onCancel, onDelete, onToggle, showModal, rank }) => {\n  return (\n    <Modal isOpen={showModal} toggle={() => onToggle()}>\n      <ModalHeader toggle={() => onToggle()}>\n        Action is irreversible!\n      </ModalHeader>\n      <ModalBody>\n        <p>Are you sure you want to delete {rank.name}?</p>\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"danger\" onClick={onDelete}>\n          Delete\n        </Button>\n        <Button color=\"secondary\" onClick={() => onCancel()}>\n          Cancel\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n};\n\nRankModalDelete.propTypes = {\n  onCancel: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onToggle: PropTypes.func.isRequired,\n  showModal: PropTypes.bool.isRequired,\n  rank: PropTypes.shape({\n    _id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired\n  }).isRequired\n};\n\nexport default RankModalDelete;\n","import React from 'react';\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  FormGroup,\n  Label,\n  Input\n} from 'reactstrap';\nimport PropTypes from 'prop-types';\n\nconst RankModalAdd = ({\n  onCancel,\n  onSave,\n  onToggle,\n  showModal,\n  onChangeText\n}) => {\n  return (\n    <Modal isOpen={showModal} toggle={() => onToggle()}>\n      <ModalHeader toggle={() => onToggle()}>Adding New Rank!</ModalHeader>\n      <ModalBody>\n        <FormGroup>\n          <Label for=\"rankName\">New rank</Label>\n          <Input\n            type=\"text\"\n            name=\"rankName\"\n            id=\"rankName\"\n            onChange={onChangeText}\n          />\n        </FormGroup>\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"success\" onClick={onSave}>\n          Add\n        </Button>\n        <Button color=\"secondary\" onClick={() => onCancel()}>\n          Cancel\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n};\n\nRankModalAdd.propTypes = {\n  onCancel: PropTypes.func.isRequired,\n  onSave: PropTypes.func.isRequired,\n  onToggle: PropTypes.func.isRequired,\n  onChangeText: PropTypes.func.isRequired,\n  showModal: PropTypes.bool.isRequired\n};\n\nexport default RankModalAdd;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { Container, Col, Row, Button, Alert, Spinner } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { Helmet } from 'react-helmet';\n\nimport AppLayout from '../shared/AppLayout';\nimport RanksTable from '../../components/ranks/RanksTable';\nimport RankModalEdit from '../../components/ranks/RankModalEdit';\nimport RankModalDelete from '../../components/ranks/RankModalDelete';\nimport RankModalAdd from '../../components/ranks/RankModalAdd';\n\nimport { addRank, deleteRank, updateRank } from './actions';\n\nconst modes = {\n  UPDATE: 'UPDATE',\n  DELETE: 'DELETE',\n  ADD: 'ADD'\n};\n\nexport class Ranks extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedId: null,\n      showModal: false,\n      mode: null,\n      newName: ''\n    };\n  }\n\n  handleUpdate = () => {\n    const { updateRank: modifyRank } = this.props;\n    const { selectedId, newName } = this.state;\n    modifyRank(selectedId, newName);\n    this.toggleModal();\n  };\n\n  handleDelete = () => {\n    const { deleteRank: removeRank } = this.props;\n    const { selectedId } = this.state;\n    removeRank(selectedId);\n    this.toggleModal();\n  };\n\n  handleAdd = () => {\n    const { addRank: createRank } = this.props;\n    const { newName } = this.state;\n    createRank(newName);\n    this.toggleModal();\n  };\n\n  handleChange = e => {\n    const name = e.target.value;\n    this.setState({\n      newName: name\n    });\n  };\n\n  toggleModal = (mode = null, id = null) => {\n    this.setState(prevState => {\n      return {\n        showModal: !prevState.showModal,\n        selectedId: id,\n        mode,\n        newName: ''\n      };\n    });\n  };\n\n  showErrors = () => {\n    const { errors } = this.props;\n\n    return (\n      <Row>\n        {errors.map(error => {\n          return (\n            <Alert key={error} color=\"danger\" className=\"w-100\">\n              {error}\n            </Alert>\n          );\n        })}\n      </Row>\n    );\n  };\n\n  getModal = () => {\n    let modal = null;\n    const { ranks } = this.props;\n    const { showModal, selectedId, mode } = this.state;\n    if (mode === modes.UPDATE) {\n      modal = (\n        <RankModalEdit\n          rank={ranks[selectedId].name}\n          onCancel={this.toggleModal}\n          onToggle={this.toggleModal}\n          onChangeText={this.handleChange}\n          showModal={showModal}\n          onSave={this.handleUpdate}\n        />\n      );\n    } else if (mode === modes.DELETE) {\n      modal = (\n        <RankModalDelete\n          rank={ranks[selectedId]}\n          onCancel={this.toggleModal}\n          onToggle={this.toggleModal}\n          onDelete={this.handleDelete}\n          showModal={showModal}\n        />\n      );\n    } else if (mode === modes.ADD) {\n      modal = (\n        <RankModalAdd\n          onCancel={this.toggleModal}\n          onToggle={this.toggleModal}\n          onSave={this.handleAdd}\n          onChangeText={this.handleChange}\n          showModal={showModal}\n        />\n      );\n    }\n    return modal;\n  };\n\n  render() {\n    const { ids, ranks, errors, actionInProgress } = this.props;\n\n    const modal = this.getModal();\n\n    const shownRanks = ids.map(id => {\n      return ranks[id];\n    });\n\n    return (\n      <AppLayout>\n        <Helmet>\n          <title>Ranks</title>\n        </Helmet>\n        <Container>\n          {modal}\n          {errors.length > 0 && this.showErrors()}\n          {actionInProgress && (\n            <Row>\n              <Alert color=\"primary\" className=\"w-100\">\n                Action in progress <Spinner color=\"primary\" size=\"sm\" />\n              </Alert>\n            </Row>\n          )}\n          <Row className=\"my-2 d-flex justify-content-center align-items-center\">\n            <Col xs=\"9\">\n              <h1>Ranks</h1>\n            </Col>\n            <Col xs=\"3\" className=\"d-flex justify-content-end\">\n              <Button\n                color=\"success\"\n                size=\"md\"\n                onClick={() => this.toggleModal(modes.ADD)}\n              >\n                Add\n              </Button>\n            </Col>\n          </Row>\n          <Row>\n            <Col md=\"12\">\n              <RanksTable\n                modes={modes}\n                ranks={shownRanks}\n                toggle={this.toggleModal}\n              />\n            </Col>\n          </Row>\n        </Container>\n      </AppLayout>\n    );\n  }\n}\n\nRanks.propTypes = {\n  ids: PropTypes.arrayOf(PropTypes.string).isRequired,\n  ranks: PropTypes.shape({\n    id: PropTypes.string\n  }).isRequired,\n  errors: PropTypes.arrayOf(PropTypes.string).isRequired,\n  addRank: PropTypes.func.isRequired,\n  deleteRank: PropTypes.func.isRequired,\n  updateRank: PropTypes.func.isRequired,\n  actionInProgress: PropTypes.bool.isRequired\n};\n\nconst mapStateToProps = state => ({\n  ids: state.ranks.get('ids'),\n  ranks: state.ranks.get('ranks'),\n  errors: state.pages.ranks.get('errors'),\n  actionInProgress: state.pages.ranks.get('actionInProgress')\n});\n\nconst mapDispatchToProps = {\n  addRank,\n  deleteRank,\n  updateRank\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Ranks);\n","export { default } from './Ranks';\n"],"sourceRoot":""}