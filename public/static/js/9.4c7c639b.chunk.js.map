{"version":3,"sources":["hooks/useReduxPageSelector.js","components/commons/Pagination.jsx","hooks/usePrevious.js","hooks/useIsMounted.js","hooks/useSuccessModal.js","components/events/all/EventsTable.jsx","pages/events/all/selectors.js","pages/events/all/All.jsx","components/events/add/GenerateForm.jsx","pages/events/hooks/useSelectPersonnelsOptionsByDate.js","pages/events/hooks/useHandleSetPersonnels.js","components/events/add/EventForm.jsx","pages/events/add/selectors.js","pages/events/add/Add.jsx","pages/events/single/Single.jsx","components/events/delete/ActionsButtons.jsx","pages/events/delete/Delete.jsx","pages/events/edit/selectors.js","hooks/useErrorModal.js","pages/events/edit/Edit.jsx","pages/events/Events.jsx","pages/events/index.js"],"names":["useReduxPageSelector","pages","selector","useSelector","storeState","get","reduce","storePages","page","Map","PaginationComponent","rowsPerPage","totalPosts","setPage","pageNumbers","useMemo","i","Math","ceil","push","handlePageClick","useCallback","selected","length","aria-label","previousLabel","previousClassName","previousLinkClassName","nextLabel","nextClassName","nextLinkClassName","breakLabel","breakClassName","breakLinkClassName","pageCount","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","pageClassName","pageLinkClassName","activeClassName","activeLinkClassName","disabledClassName","usePrevious","value","ref","useRef","useEffect","current","useIsMounted","isMounted","useSuccessUpdatedModal","bodyText","timer","Swal","fire","title","text","icon","confirmButtonColor","timerProgressBar","memo","events","path","size","Table","striped","responsive","className","map","event","key","getIn","Row","Button","tag","Link","to","color","getEvents","createSelector","state","ids","byEventIds","id","getPoints","points","byPointIds","useRouteMatch","useState","filterBy","setFilterBy","shownEvents","lastIndex","firstIndex","slice","filter","target","Helmet","Container","Col","xs","FormGroup","Label","for","Input","type","name","onChange","point","Pagination","validate","values","errors","pioneers","wspecs","GenerationFormSchema","Yup","shape","ranks","min","required","platoons","statuses","pointSystem","date","setSelectedPersonnels","handleLogout","modal","setModal","toggle","confirmButtonText","moment","isValid","checkDateValid","prevExcludeStatuses","setPrevExcludeStatuses","handle401","setErrors","isGenerating","setIsGenerating","handleFormSubmission","a","async","selectedRanks","selectedPlatoons","onlyStatus","statusNotAllowed","data","pointSystemId","format","EventsService","generateName","response","ok","personnels","person","_id","label","platoon","rank","status","responseErrors","message","concat","useHandleGenerateFormSubmission","formik","useFormik","initialValues","validationSchema","onSubmit","footer","Spinner","onClick","handleSubmit","disabled","isSubmitting","Modal","isOpen","ModalHeader","ModalBody","handleChange","invalid","touched","FormFeedback","multiple","check","e","checked","setFieldValue","toArray","error","ModalFooter","useSelectPersonnelsOptionsByDate","includes","currEventDate","dayBeforeEventDate","subtract","dayAfterEventDate","add","find","p","eventsDate","useHandleSetPersonnels","setFunc","field","selectedPersonnels","animatedComponents","makeAnimated","EventFormSchema","max","test","pointAllocation","isAdding","has","setPersonnelsByGenerate","personnelsToSet","selectPersonnelsOptions","handleChangePersonnels","Form","placeholder","tz","FormText","options","components","isMulti","getStatuses","byStatusIds","getRanks","byRankIds","getPlatoons","byPlatoonIds","getPersonnels","byIds","history","useHistory","dispatch","useDispatch","submit","setSubmit","createEvent","logout","mounted","replace","Breadcrumb","BreadcrumbItem","active","Alert","params","useParams","eventId","personnel","isDeleting","handleCancel","handleConfirm","revert","setRevert","handleRevert","handleDelete","deleteEvent","Card","body","CardTitle","CardText","sm","md","goBack","byPersonnelIds","getEventById","_","eventById","useErrorModal","Edit","showSuccessModal","showErrorModal","allPersonnelsList","personnelsbyId","isUpdating","prevUpdating","currentEventPersonnels","eventPersonnel","personnelsOption","setPersonnels","handleOnChange","handleSave","newPersonnels","updateEvent","exact","component","All","Add","Delete","Single"],"mappings":"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","file":"static/js/9.4c7c639b.chunk.js","sourcesContent":["import { useSelector } from 'react-redux';\nimport { Map } from 'immutable';\n\nfunction useReduxPageSelector(pages, selector) {\n  const state = useSelector(storeState => {\n    if (typeof pages === 'string') {\n      return storeState.pages[pages].get(selector);\n    }\n    const foundPage = pages.reduce((storePages, page) => {\n      if (storePages && storePages[page] !== 'undefined') {\n        return storePages[page];\n      }\n      return Map();\n    }, storeState.pages);\n\n    return foundPage.get(selector);\n  });\n\n  return state;\n}\n\nexport default useReduxPageSelector;\n","import React, { useMemo, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactPaginate from 'react-paginate';\n\nconst PaginationComponent = ({ rowsPerPage, totalPosts, setPage }) => {\n  const pageNumbers = useMemo(() => {\n    const page = [];\n    for (let i = 1; i <= Math.ceil(totalPosts / rowsPerPage); i += 1) {\n      page.push(i);\n    }\n    return page;\n  }, [totalPosts, rowsPerPage]);\n  const handlePageClick = useCallback(\n    ({ selected }) => {\n      const pageNumber = selected + 1;\n      setPage(pageNumber);\n    },\n    [setPage]\n  );\n\n  if (pageNumbers.length === 0) {\n    return null;\n  }\n\n  return (\n    <nav aria-label=\"Page pagination\">\n      <ReactPaginate\n        previousLabel=\"&laquo;\"\n        previousClassName=\"page-item\"\n        previousLinkClassName=\"page-link\"\n        nextLabel=\"&raquo;\"\n        nextClassName=\"page-item\"\n        nextLinkClassName=\"page-link\"\n        breakLabel=\"...\"\n        breakClassName=\"page-item\"\n        breakLinkClassName=\"page-link\"\n        pageCount={pageNumbers.length}\n        marginPagesDisplayed={2}\n        pageRangeDisplayed={5}\n        onPageChange={handlePageClick}\n        containerClassName=\"pagination justify-content-center\"\n        pageClassName=\"page-item\"\n        pageLinkClassName=\"page-link\"\n        activeClassName=\"page-item active\"\n        activeLinkClassName=\"page-item active\"\n        disabledClassName=\"page-item disabled\"\n      />\n    </nav>\n  );\n};\n\nPaginationComponent.propTypes = {\n  rowsPerPage: PropTypes.number.isRequired,\n  totalPosts: PropTypes.number.isRequired,\n  setPage: PropTypes.func.isRequired\n};\n\nexport default PaginationComponent;\n","import { useRef, useEffect } from 'react';\n\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  // This will return value before the useEffect update the value\n  return ref.current;\n}\n\nexport default usePrevious;\n","import { useRef, useEffect } from 'react';\n\nfunction useIsMounted() {\n  const isMounted = useRef(true);\n  useEffect(() => {\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  return isMounted;\n}\n\nexport default useIsMounted;\n","import { useCallback } from 'react';\n\nimport Swal from 'sweetalert2';\n\nfunction useSuccessUpdatedModal(bodyText, timer) {\n  const showModal = useCallback(() => {\n    if (timer) {\n      return Swal.fire({\n        title: 'Success!',\n        text: bodyText,\n        icon: 'success',\n        confirmButtonColor: '#007bff',\n        timer: 2000,\n        timerProgressBar: true\n      });\n    }\n\n    return Swal.fire({\n      title: 'Success!',\n      text: bodyText,\n      confirmButtonColor: '#007bff',\n      icon: 'success'\n    });\n  }, [bodyText, timer]);\n\n  return showModal;\n}\n\nexport default useSuccessUpdatedModal;\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Button, Row } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { List } from 'immutable';\n\nconst EventsTable = ({ events, path }) => {\n  if (events.size === 0) {\n    return <p>No events available</p>;\n  }\n  return (\n    <Table striped responsive>\n      <thead>\n        <tr>\n          <th className=\"text-center\">Name</th>\n          <th className=\"text-center\">Date</th>\n          <th className=\"text-center\">Point System</th>\n          <th className=\"text-center\">Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        {events.map(event => {\n          return (\n            <tr key={event.get('_id')}>\n              <td className=\"text-center\">{event.get('name')}</td>\n              <td className=\"text-center\">{event.get('date')}</td>\n              <td className=\"text-center\">\n                {event.getIn(['pointSystem', 'name'])}\n              </td>\n              <td className=\"text-center\">\n                <Row>\n                  <Button\n                    tag={Link}\n                    to={`${path}/${event.get('_id')}`}\n                    color=\"primary\"\n                  >\n                    View\n                  </Button>\n                </Row>\n                <Row className=\"my-2\">\n                  <Button\n                    color=\"danger\"\n                    tag={Link}\n                    to={`${path}/${event.get('_id')}/delete`}\n                  >\n                    Delete\n                  </Button>\n                </Row>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </Table>\n  );\n};\n\nEventsTable.propTypes = {\n  events: PropTypes.oneOfType([PropTypes.instanceOf(List).isRequired])\n    .isRequired,\n  path: PropTypes.string.isRequired\n};\n\nexport default memo(EventsTable);\n","import { createSelector } from 'reselect';\n\nconst eventIds = state => state.events.get('ids');\nconst allEvents = state => state.events.get('events');\nconst getEvents = createSelector(eventIds, allEvents, (ids, byEventIds) =>\n  ids.map(id => byEventIds.get(id))\n);\n\nconst pointIds = state => state.points.get('ids');\nconst allPoints = state => state.points.get('points');\nconst getPoints = createSelector(pointIds, allPoints, (ids, byPointIds) =>\n  ids.map(id => byPointIds.get(id))\n);\n\nexport { getEvents, getPoints };\n","import React, { useState, useMemo, useCallback, memo } from 'react';\nimport {\n  Container,\n  Row,\n  Button,\n  Col,\n  Label,\n  Input,\n  FormGroup\n} from 'reactstrap';\nimport { Helmet } from 'react-helmet';\nimport { useSelector } from 'react-redux';\nimport { Link, useRouteMatch } from 'react-router-dom';\nimport EventsTable from '../../../components/events/all/EventsTable';\nimport Pagination from '../../../components/commons/Pagination';\nimport Layout from '../../shared/AppLayout';\nimport { getEvents, getPoints } from './selectors';\n\nexport function All() {\n  const { path } = useRouteMatch();\n  const [rowsPerPage] = useState(10);\n  const [page, setPage] = useState(1);\n  const [filterBy, setFilterBy] = useState('ALL');\n  const events = useSelector(getEvents);\n  const points = useSelector(getPoints);\n\n  // Slice events\n  const shownEvents = useMemo(() => {\n    const lastIndex = page * rowsPerPage;\n    const firstIndex = lastIndex - rowsPerPage;\n    if (filterBy === 'ALL') {\n      return events.slice(firstIndex, lastIndex);\n    }\n\n    const filteredEvents = events.filter(event => {\n      return event.getIn(['pointSystem', 'name']) === filterBy;\n    });\n\n    return filteredEvents.slice(firstIndex, lastIndex);\n  }, [events, filterBy, page, rowsPerPage]);\n\n  const filter = useCallback(({ target: { value } }) => setFilterBy(value), []);\n\n  return (\n    <Layout>\n      <Helmet>\n        <title>Events</title>\n      </Helmet>\n      <Container className=\"py-2\">\n        <Row className=\"justify-content-center align-items-center\">\n          <Col xs=\"9\">\n            <h1>Events</h1>\n          </Col>\n          <Col xs=\"3\" className=\"d-flex justify-content-end\">\n            <Button color=\"success\" size=\"md\" tag={Link} to={`${path}/add`}>\n              Add\n            </Button>\n          </Col>\n        </Row>\n        <Row>\n          <Col xs=\"12\">\n            <p className=\"text-danger\">\n              Note: Past events that have expired will automatically be removed,\n              points will be retained.\n            </p>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col>\n            <FormGroup>\n              <Label for=\"filterSelect\">Filter</Label>\n              <Input\n                type=\"select\"\n                name=\"filterSelect\"\n                id=\"filterSelect\"\n                onChange={filter}\n              >\n                <option value=\"ALL\">ALL</option>\n                {points.map(point => (\n                  <option key={point.get('_id')} value={point.get('name')}>\n                    {point.get('name')}\n                  </option>\n                ))}\n              </Input>\n            </FormGroup>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <EventsTable events={shownEvents} path={path} />\n          </Col>\n        </Row>\n        <Row className=\"justify-content-center align-items-center\">\n          <Col>\n            <Pagination\n              rowsPerPage={rowsPerPage}\n              setPage={setPage}\n              totalPosts={events.size}\n            />\n          </Col>\n        </Row>\n      </Container>\n    </Layout>\n  );\n}\n\nexport default memo(All);\n","import React, { useState, useCallback, memo } from 'react';\nimport {\n  Button,\n  Row,\n  Col,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  FormGroup,\n  Label,\n  Input,\n  Spinner,\n  FormFeedback\n} from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport moment from 'moment-timezone';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport Swal from 'sweetalert2';\nimport { List } from 'immutable';\n\nimport EventsService from '../../../services/events';\nimport useIsMounted from '../../../hooks/useIsMounted';\n\nconst checkDateValid = date => {\n  return moment(date, 'DDMMYY', true).isValid();\n};\n\nconst validate = values => {\n  const errors = {};\n  if (values.pioneers === 0 && values.wspecs === 0) {\n    errors.pioneers = 'Must contained at least 1 in pioneers or specs';\n    errors.wspecs = 'Must contained at least 1 in pioneers or specs';\n  }\n\n  return errors;\n};\n\nconst GenerationFormSchema = Yup.object().shape({\n  ranks: Yup.array()\n    .min(1, 'Require at least 1 rank select')\n    .required('required'),\n  platoons: Yup.array()\n    .min(1, 'Require at least 1 platoon select')\n    .required('required'),\n  pioneers: Yup.number(),\n  wspecs: Yup.number()\n});\n\nfunction useHandleGenerateFormSubmission({\n  date,\n  handle401,\n  pointSystem,\n  setSelectedPersonnels,\n  toggle\n}) {\n  const isMounted = useIsMounted();\n  const [errors, setErrors] = useState([]);\n  const [isGenerating, setIsGenerating] = useState(false);\n\n  const handler = useCallback(\n    async values => {\n      if (isMounted.current) setIsGenerating(true);\n      const {\n        ranks: selectedRanks,\n        platoons: selectedPlatoons,\n        onlyStatus,\n        statusNotAllowed,\n        pioneers,\n        wspecs\n      } = values;\n\n      const data = {\n        pointSystemId: pointSystem,\n        date: moment(date, 'DDMMYY', true).format('DD-MM-YYYY'),\n        ranks: selectedRanks,\n        platoons: selectedPlatoons\n      };\n\n      if (onlyStatus && statusNotAllowed.length === 0) {\n        data.onlyStatus = true;\n      } else if (statusNotAllowed.length > 0 && !onlyStatus) {\n        data.statusNotAllowed = statusNotAllowed;\n      }\n\n      if (pioneers > 0) {\n        data.pioneers = pioneers;\n      }\n      if (wspecs > 0) {\n        data.wspecs = wspecs;\n      }\n\n      try {\n        const response = await EventsService.generateName(data);\n        if (response.ok) {\n          const personnels = response.data.map(person => {\n            return {\n              value: person._id,\n              label: `${person.platoon} ${person.rank} ${person.name}`\n            };\n          });\n          if (isMounted.current) {\n            setSelectedPersonnels(personnels);\n            toggle();\n          }\n        } else if (response.status === 401) {\n          if (isMounted.current) handle401();\n        } else {\n          let responseErrors = [];\n          if (response.data.message) {\n            responseErrors.push(response.data.message);\n          }\n\n          if (response.data.errors) {\n            responseErrors = responseErrors.concat(response.data.errors);\n          }\n          if (isMounted.current) setErrors(responseErrors);\n        }\n      } catch (error) {\n        if (isMounted.current)\n          setErrors([error.message || 'Unable to generate names']);\n      }\n      if (isMounted.current) setIsGenerating(false);\n    },\n    [date, handle401, isMounted, pointSystem, setSelectedPersonnels, toggle]\n  );\n\n  return { handleFormSubmission: handler, isGenerating, errors };\n}\n\nconst GenerateForm = ({\n  ranks,\n  platoons,\n  statuses,\n  pointSystem,\n  date,\n  setSelectedPersonnels,\n  handleLogout\n}) => {\n  const [modal, setModal] = useState(false);\n\n  const toggle = useCallback(() => {\n    if (date === '') {\n      return Swal.fire({\n        title: 'Assign Date First',\n        text: 'Please assign a date first before using generate personnels',\n        confirmButtonText: 'Okay!'\n      });\n    }\n\n    if (!checkDateValid(date)) {\n      return Swal.fire({\n        title: 'Invalid Date Format',\n        text: 'Please make sure that your date is DDMMYY format',\n        confirmButtonText: 'Okay!'\n      });\n    }\n\n    return setModal(!modal);\n  }, [date, modal]);\n\n  const [prevExcludeStatuses, setPrevExcludeStatuses] = useState([]);\n\n  const {\n    handleFormSubmission,\n    isGenerating,\n    errors\n  } = useHandleGenerateFormSubmission({\n    date,\n    handle401: handleLogout,\n    pointSystem,\n    setSelectedPersonnels,\n    toggle\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      ranks: [],\n      platoons: [],\n      onlyStatus: false,\n      statusNotAllowed: [],\n      pioneers: 1,\n      wspecs: 0\n    },\n    validationSchema: GenerationFormSchema,\n    validate,\n    onSubmit: handleFormSubmission\n  });\n\n  const handleExcludeStatus = e => {\n    if (e.target.checked) {\n      // setPrevExcludeStatuses(excludeStatus);\n      setPrevExcludeStatuses(formik.values.statusNotAllowed);\n      formik.setFieldValue(\n        'statusNotAllowed',\n        statuses.map(status => status.get('_id')).toArray()\n      );\n      if (formik.values.onlyStatus) formik.setFieldValue('onlyStatus', false);\n    } else {\n      formik.setFieldValue('statusNotAllowed', prevExcludeStatuses);\n      setPrevExcludeStatuses([]);\n    }\n  };\n\n  const handleStatusesOnly = e => {\n    if (e.target.checked) {\n      setPrevExcludeStatuses(formik.values.statusNotAllowed);\n      formik.setFieldValue('statusNotAllowed', []);\n      formik.setFieldValue('onlyStatus', true);\n    } else {\n      formik.setFieldValue('statusNotAllowed', prevExcludeStatuses);\n      formik.setFieldValue('onlyStatus', false);\n      setPrevExcludeStatuses([]);\n    }\n  };\n\n  const handleSelectAllRanks = e => {\n    if (e.target.checked) {\n      formik.setFieldValue(\n        'ranks',\n        ranks.map(rank => rank.get('_id')).toArray()\n      );\n    } else {\n      formik.setFieldValue('ranks', []);\n    }\n  };\n\n  const handleSelectAllPlatoons = e => {\n    if (e.target.checked) {\n      formik.setFieldValue(\n        'platoons',\n        platoons.map(platoon => platoon.get('_id')).toArray()\n      );\n    } else {\n      formik.setFieldValue('platoons', []);\n    }\n  };\n\n  let footer = null;\n  if (isGenerating) {\n    footer = <Spinner color=\"primary\" />;\n  } else {\n    footer = (\n      <>\n        <Button\n          color=\"success\"\n          onClick={formik.handleSubmit}\n          disabled={formik.isSubmitting}\n        >\n          Generate\n        </Button>{' '}\n        <Button color=\"secondary\" onClick={toggle}>\n          Cancel\n        </Button>\n      </>\n    );\n  }\n  return (\n    <>\n      <Button color=\"primary\" className=\"w-100\" onClick={toggle}>\n        Generate Personnels\n      </Button>\n      <Modal isOpen={modal} toggle={toggle}>\n        <ModalHeader toggle={toggle}>Generate</ModalHeader>\n        <ModalBody>\n          <Row>\n            <Col>\n              <FormGroup>\n                <Label for=\"PioneersQty\">Pioneers Qty</Label>\n                <Input\n                  type=\"number\"\n                  name=\"pioneers\"\n                  id=\"PioneersQty\"\n                  value={formik.values.pioneers}\n                  onChange={formik.handleChange}\n                  invalid={\n                    formik.touched.pioneers &&\n                    formik.errors.pioneers &&\n                    formik.errors.pioneers !== ''\n                  }\n                  disabled={formik.isSubmitting}\n                />\n                {formik.touched.pioneers && formik.errors.pioneers ? (\n                  <FormFeedback>{formik.errors.pioneers}</FormFeedback>\n                ) : null}\n              </FormGroup>\n              <FormGroup>\n                <Label for=\"WSQty\">WSpec Qty</Label>\n                <Input\n                  type=\"number\"\n                  name=\"wspecs\"\n                  id=\"WSQty\"\n                  value={formik.values.wspecs}\n                  onChange={formik.handleChange}\n                  invalid={\n                    formik.touched.wspecs &&\n                    formik.errors.wspecs &&\n                    formik.errors.wspecs !== ''\n                  }\n                  disabled={formik.isSubmitting}\n                />\n                {formik.touched.wspecs && formik.errors.wspecs ? (\n                  <FormFeedback>{formik.errors.wspecs}</FormFeedback>\n                ) : null}\n              </FormGroup>\n              <FormGroup>\n                <Label for=\"selectPlatoons\">Platoons</Label>\n                <Input\n                  type=\"select\"\n                  name=\"platoons\"\n                  id=\"selectPlatoons\"\n                  multiple\n                  value={formik.values.platoons}\n                  onChange={formik.handleChange}\n                  invalid={\n                    formik.touched.platoons &&\n                    formik.errors.platoons &&\n                    formik.errors.platoons !== ''\n                  }\n                  disabled={formik.isSubmitting}\n                >\n                  {platoons.map(platoon => {\n                    return (\n                      <option\n                        value={platoon.get('_id')}\n                        key={platoon.get('_id')}\n                      >\n                        {platoon.get('name')}\n                      </option>\n                    );\n                  })}\n                </Input>\n                <FormGroup check>\n                  <Label check>\n                    <Input\n                      type=\"checkbox\"\n                      onChange={handleSelectAllPlatoons}\n                      disabled={formik.isSubmitting}\n                      checked={formik.values.platoons.length === platoons.size}\n                    />{' '}\n                    All Platoons\n                  </Label>\n                </FormGroup>\n                {formik.touched.platoons && formik.errors.platoons ? (\n                  <FormFeedback>{formik.errors.platoons}</FormFeedback>\n                ) : null}\n              </FormGroup>\n              <FormGroup>\n                <Label for=\"selectRanks\">Ranks</Label>\n                <Input\n                  type=\"select\"\n                  name=\"ranks\"\n                  id=\"selectRanks\"\n                  multiple\n                  value={formik.values.ranks}\n                  onChange={formik.handleChange}\n                  invalid={\n                    formik.touched.ranks &&\n                    formik.errors.ranks &&\n                    formik.errors.ranks !== ''\n                  }\n                  disabled={formik.isSubmitting}\n                >\n                  {ranks.map(rank => {\n                    return (\n                      <option value={rank.get('_id')} key={rank.get('_id')}>\n                        {rank.get('name')}\n                      </option>\n                    );\n                  })}\n                </Input>\n                <FormGroup check>\n                  <Label check>\n                    <Input\n                      type=\"checkbox\"\n                      onChange={handleSelectAllRanks}\n                      disabled={formik.isSubmitting}\n                      checked={formik.values.ranks.length === ranks.size}\n                    />{' '}\n                    All Ranks\n                  </Label>\n                </FormGroup>\n                {formik.touched.ranks && formik.errors.ranks ? (\n                  <FormFeedback>{formik.errors.ranks}</FormFeedback>\n                ) : null}\n              </FormGroup>\n\n              <FormGroup>\n                <Label for=\"selectStatuses\">Statuses not allowed</Label>\n                <Input\n                  type=\"select\"\n                  name=\"statusNotAllowed\"\n                  id=\"selectStatuses\"\n                  multiple\n                  value={formik.values.statusNotAllowed}\n                  onChange={formik.handleChange}\n                  disabled={formik.isSubmitting}\n                >\n                  {statuses.map(status => {\n                    return (\n                      <option value={status.get('_id')} key={status.get('_id')}>\n                        {status.get('name')}\n                      </option>\n                    );\n                  })}\n                </Input>\n              </FormGroup>\n              <FormGroup check>\n                <Label check>\n                  <Input\n                    type=\"checkbox\"\n                    onChange={handleExcludeStatus}\n                    disabled={formik.isSubmitting}\n                    checked={\n                      formik.values.statusNotAllowed.length === statuses.size\n                    }\n                  />{' '}\n                  Exclude All Status\n                </Label>\n              </FormGroup>\n              <FormGroup check>\n                <Label check>\n                  <Input\n                    type=\"checkbox\"\n                    name=\"onlyStatus\"\n                    disabled={formik.isSubmitting}\n                    onChange={handleStatusesOnly}\n                    checked={formik.values.onlyStatus}\n                  />{' '}\n                  Statuses Only\n                </Label>\n              </FormGroup>\n            </Col>\n          </Row>\n          {errors.length > 0 && (\n            <Row>\n              <Col>\n                {errors.map(error => {\n                  return (\n                    <p className=\"text-danger\" key={error}>\n                      {error}\n                    </p>\n                  );\n                })}\n              </Col>\n            </Row>\n          )}\n        </ModalBody>\n        <ModalFooter>{footer}</ModalFooter>\n      </Modal>\n    </>\n  );\n};\n\nGenerateForm.propTypes = {\n  ranks: PropTypes.oneOfType([PropTypes.instanceOf(List)]).isRequired,\n  platoons: PropTypes.oneOfType([PropTypes.instanceOf(List)]).isRequired,\n  statuses: PropTypes.oneOfType([PropTypes.instanceOf(List)]).isRequired,\n  setSelectedPersonnels: PropTypes.func.isRequired,\n  date: PropTypes.string.isRequired,\n  pointSystem: PropTypes.string.isRequired,\n  handleLogout: PropTypes.func.isRequired\n};\n\nexport default memo(GenerateForm);\n","import { useMemo } from 'react';\nimport moment from 'moment-timezone';\n\nfunction useSelectPersonnelsOptionsByDate(date, personnels, includes = []) {\n  const selectPersonnelsOptions = useMemo(() => {\n    if (date !== '' && moment(date, 'DDMMYY', true).isValid()) {\n      const currEventDate = moment(date, 'DDMMYY', true).format('DD-MM-YYYY');\n      const dayBeforeEventDate = moment(currEventDate, 'DD-MM-YYYY', true)\n        .subtract(1, 'd')\n        .format('DD-MM-YYYY');\n      const dayAfterEventDate = moment(currEventDate, 'DD-MM-YYYY', true)\n        .add(1, 'd')\n        .format('DD-MM-YYYY');\n\n      return personnels\n        .filter(person => {\n          const blockoutDates = person.get('blockOutDates');\n          if (blockoutDates.includes(currEventDate)) {\n            return false;\n          }\n          // handle event personnel if modifying\n          if (includes.find(p => p.value === person.get('_id'))) {\n            return true;\n          }\n          const eventsDate = person.get('eventsDate');\n          if (\n            eventsDate.includes(currEventDate) ||\n            eventsDate.includes(dayBeforeEventDate) ||\n            eventsDate.includes(dayAfterEventDate)\n          ) {\n            return false;\n          }\n\n          return true;\n        })\n        .map(person => {\n          return {\n            value: person.get('_id'),\n            label: `${person.getIn(['platoon', 'name'])} ${person.getIn([\n              'rank',\n              'name'\n            ])} ${person.get('name')}`\n          };\n        });\n    }\n\n    return personnels.map(person => {\n      return {\n        value: person.get('_id'),\n        label: `${person.getIn(['platoon', 'name'])} ${person.getIn([\n          'rank',\n          'name'\n        ])} ${person.get('name')}`\n      };\n    });\n  }, [date, includes, personnels]);\n\n  return selectPersonnelsOptions;\n}\n\nexport default useSelectPersonnelsOptionsByDate;\n","import { useCallback } from 'react';\nimport moment from 'moment-timezone';\nimport Swal from 'sweetalert2';\n\nfunction useHandleSetPersonnels(date, setFunc, field) {\n  const handler = useCallback(\n    selectedPersonnels => {\n      if (date === '' || !moment(date, 'DDMMYY', true).isValid()) {\n        return Swal.fire({\n          title: 'Please set a date',\n          text: ' Please assign a valid date before selecting personnels',\n          timer: 3000\n        });\n      }\n      if (!selectedPersonnels && field) {\n        return setFunc(field, []);\n      }\n      if (!selectedPersonnels && !field) {\n        return setFunc([]);\n      }\n      if (!field) {\n        return setFunc(selectedPersonnels);\n      }\n      // const values = selectedPersonnels.map(person => person.value);\n      return setFunc(field, selectedPersonnels);\n    },\n    [date, field, setFunc]\n  );\n  return handler;\n}\n\nexport default useHandleSetPersonnels;\n","import React, { useCallback, memo } from 'react';\nimport {\n  Form,\n  Row,\n  Col,\n  FormGroup,\n  Label,\n  Input,\n  FormText,\n  Button,\n  FormFeedback\n} from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport moment from 'moment-timezone';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { List } from 'immutable';\nimport Select from 'react-select';\nimport makeAnimated from 'react-select/animated';\nimport GenerateForm from './GenerateForm';\nimport useSelectPersonnelsOptionsByDate from '../../../pages/events/hooks/useSelectPersonnelsOptionsByDate';\nimport useHandleSetPersonnels from '../../../pages/events/hooks/useHandleSetPersonnels';\n\nconst animatedComponents = makeAnimated();\n\nconst EventFormSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(1)\n    .max(50)\n    .required('Name is required'),\n  date: Yup.string()\n    .required('Date is required')\n    .test('checkValidDate', 'Invalid date, only DDMMYY is allowed', date => {\n      return moment(date, 'DDMMYY', true).isValid();\n    }),\n  pointSystem: Yup.string().required('Point System is required'),\n  pointAllocation: Yup.number()\n    .min(1, 'Minimum of 1 point is needed')\n    .required('Point Allocation is required'),\n  selectedPersonnels: Yup.array()\n    .min(1, 'At least 1 personnels is required')\n    .required('Personnel is required')\n});\n\nconst EventForm = ({\n  points,\n  platoons,\n  ranks,\n  statuses,\n  personnels,\n  isAdding,\n  handleSubmit,\n  handleLogout\n}) => {\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      date: '',\n      pointSystem: points.has(0) ? points.getIn(['0', '_id']) : '',\n      pointAllocation: 1,\n      selectedPersonnels: []\n    },\n    validationSchema: EventFormSchema,\n    onSubmit: handleSubmit\n  });\n\n  /**\n   * Use by generation form\n   */\n  const setPersonnelsByGenerate = useCallback(\n    personnelsToSet => {\n      formik.setFieldValue('selectedPersonnels', personnelsToSet);\n    },\n    [formik]\n  );\n\n  const selectPersonnelsOptions = useSelectPersonnelsOptionsByDate(\n    formik.values.date,\n    personnels\n  );\n\n  const handleChangePersonnels = useHandleSetPersonnels(\n    formik.values.date,\n    formik.setFieldValue,\n    'selectedPersonnels'\n  );\n\n  return (\n    <Form onSubmit={formik.handleSubmit}>\n      <Row>\n        <Col>\n          <FormGroup>\n            <Label for=\"Name\">Name</Label>\n            <Input\n              type=\"text\"\n              name=\"name\"\n              id=\"Name\"\n              placeholder=\"Name of the event\"\n              onChange={formik.handleChange}\n              value={formik.values.name}\n              disabled={formik.isSubmitting}\n              invalid={\n                formik.touched.name &&\n                formik.errors.name &&\n                formik.errors.name !== ''\n              }\n            />\n            {formik.touched.name && formik.errors.name ? (\n              <FormFeedback>{formik.errors.name}</FormFeedback>\n            ) : null}\n          </FormGroup>\n          <FormGroup>\n            <Label for=\"PointSystem\">Point System</Label>\n            <Input\n              type=\"select\"\n              name=\"pointSystem\"\n              id=\"PointSystem\"\n              value={formik.values.pointSystem}\n              disabled={formik.isSubmitting}\n              onChange={formik.handleChange}\n              invalid={\n                formik.touched.pointSystem &&\n                formik.errors.pointSystem &&\n                formik.errors.pointSystem !== ''\n              }\n            >\n              {points.map(point => (\n                <option key={point.get('_id')} value={point.get('_id')}>\n                  {point.get('name')}\n                </option>\n              ))}\n            </Input>\n            {formik.touched.pointSystem && formik.errors.pointSystem ? (\n              <FormFeedback>{formik.errors.pointSystem}</FormFeedback>\n            ) : null}\n          </FormGroup>\n          <FormGroup>\n            <Label for=\"Date\">Date</Label>\n            <Input\n              type=\"text\"\n              name=\"date\"\n              id=\"Date\"\n              disabled={formik.isSubmitting}\n              placeholder={`e.g. ${moment()\n                .tz('Asia/Singapore')\n                .format('DDMMYY')}`}\n              onChange={formik.handleChange}\n              value={formik.values.date}\n              invalid={\n                formik.touched.date &&\n                formik.errors.date &&\n                formik.errors.date !== ''\n              }\n            />\n            {formik.touched.date && formik.errors.date ? (\n              <FormFeedback>{formik.errors.date}</FormFeedback>\n            ) : null}\n            <FormText color=\"muted\">\n              Must be in DDMMYY format, it will automatically convert to\n              DD-MM-YYYY during submission\n            </FormText>\n          </FormGroup>\n          <FormGroup>\n            <Label for=\"PointAllocation\">Point Allocation</Label>\n            <Input\n              type=\"number\"\n              name=\"pointAllocation\"\n              disabled={formik.isSubmitting}\n              id=\"PointAllocation\"\n              onChange={formik.handleChange}\n              value={formik.values.pointAllocation}\n              invalid={\n                formik.touched.pointAllocation &&\n                formik.errors.pointAllocation &&\n                formik.errors.pointAllocation !== ''\n              }\n            />\n            <FormText color=\"muted\">\n              Min of 1 point is required to create event\n            </FormText>\n            {formik.touched.pointAllocation && formik.errors.pointAllocation ? (\n              <FormFeedback>{formik.errors.pointAllocation}</FormFeedback>\n            ) : null}\n          </FormGroup>\n        </Col>\n      </Row>\n      <Row>\n        <Col />\n      </Row>\n      {formik.touched.selectedPersonnels && formik.errors.selectedPersonnels ? (\n        <Row>\n          <Col>\n            <p className=\"text-danger\">{formik.errors.selectedPersonnels}</p>\n          </Col>\n        </Row>\n      ) : null}\n\n      <Row>\n        <Col className=\"w-100\">\n          <FormGroup>\n            <Label for=\"selectedPersonnels\">\n              Personnels Selected: [{formik.values.selectedPersonnels.length}]\n            </Label>\n            <Select\n              options={selectPersonnelsOptions}\n              components={animatedComponents}\n              isMulti\n              id=\"selectedPersonnels\"\n              name=\"selectedPersonnels\"\n              placeholder=\"Select Personnels..\"\n              // value={getSelectedPersonnelsValues}\n              value={formik.values.selectedPersonnels}\n              onChange={handleChangePersonnels}\n            />\n          </FormGroup>\n        </Col>\n      </Row>\n      <Row className=\"mt-2\">\n        <Col>\n          <GenerateForm\n            platoons={platoons}\n            ranks={ranks}\n            statuses={statuses}\n            setSelectedPersonnels={setPersonnelsByGenerate}\n            pointSystem={formik.values.pointSystem}\n            date={formik.values.date}\n            handleLogout={handleLogout}\n          />\n        </Col>\n      </Row>\n      <Row className=\"my-2\">\n        <Col className=\"text-center\">\n          <Button\n            size=\"lg\"\n            className=\"w-100\"\n            color=\"success\"\n            type=\"submit\"\n            disabled={formik.isSubmitting || isAdding}\n          >\n            {formik.isSubmitting || isAdding ? `Creating...` : `Create Event`}\n          </Button>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nEventForm.propTypes = {\n  points: PropTypes.oneOfType([PropTypes.instanceOf(List)]).isRequired,\n  ranks: PropTypes.oneOfType([PropTypes.instanceOf(List)]).isRequired,\n  platoons: PropTypes.oneOfType([PropTypes.instanceOf(List)]).isRequired,\n  statuses: PropTypes.oneOfType([PropTypes.instanceOf(List)]).isRequired,\n  personnels: PropTypes.oneOfType([PropTypes.instanceOf(List)]).isRequired,\n  // personnels: PropTypes.arrayOf(PropTypes.instanceOf(Map)).isRequired,\n  isAdding: PropTypes.bool.isRequired,\n  handleSubmit: PropTypes.func.isRequired,\n  handleLogout: PropTypes.func.isRequired\n};\n\nexport default memo(EventForm);\n","import { createSelector } from 'reselect';\n\nconst pointIds = state => state.points.get('ids');\nconst allPoints = state => state.points.get('points');\nconst getPoints = createSelector(pointIds, allPoints, (ids, byPointIds) =>\n  ids.map(id => byPointIds.get(id))\n);\n\nconst statusIds = state => state.statuses.get('ids');\nconst allStatuses = state => state.statuses.get('statuses');\nconst getStatuses = createSelector(statusIds, allStatuses, (ids, byStatusIds) =>\n  ids.map(id => byStatusIds.get(id))\n);\n\nconst rankIds = state => state.ranks.get('ids');\nconst allRanks = state => state.ranks.get('ranks');\nconst getRanks = createSelector(rankIds, allRanks, (ids, byRankIds) =>\n  ids.map(id => byRankIds.get(id))\n);\n\nconst platoonIds = state => state.platoons.get('ids');\nconst allPlatoons = state => state.platoons.get('platoons');\nconst getPlatoons = createSelector(\n  platoonIds,\n  allPlatoons,\n  (ids, byPlatoonIds) => ids.map(id => byPlatoonIds.get(id))\n);\n\nconst personnelIds = state => state.personnels.get('ids');\nconst allPersonnels = state => state.personnels.get('personnels');\nconst getPersonnels = createSelector(\n  personnelIds,\n  allPersonnels,\n  (ids, byIds) => ids.map(id => byIds.get(id))\n);\n\nexport { getPoints, getStatuses, getRanks, getPlatoons, getPersonnels };\n","import React, { useState, useEffect, useCallback, memo, useMemo } from 'react';\nimport {\n  Container,\n  Row,\n  Col,\n  Breadcrumb,\n  BreadcrumbItem,\n  Alert\n} from 'reactstrap';\nimport { Link, useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport moment from 'moment-timezone';\nimport { Helmet } from 'react-helmet';\nimport Layout from '../../shared/AppLayout';\nimport EventForm from '../../../components/events/add/EventForm';\nimport {\n  getPlatoons,\n  getPoints,\n  getRanks,\n  getStatuses,\n  getPersonnels\n} from './selectors';\nimport { createEvent } from './actions';\nimport { logout } from '../../../actions/authActions';\nimport useReduxPageSelector from '../../../hooks/useReduxPageSelector';\n\nexport function Add() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const [submit, setSubmit] = useState(false);\n  const platoons = useSelector(getPlatoons);\n  const points = useSelector(getPoints);\n  const ranks = useSelector(getRanks);\n  const statuses = useSelector(getStatuses);\n  const pages = useMemo(() => ['events', 'add'], []);\n  const isAdding = useReduxPageSelector(pages, 'isAdding');\n  const errors = useReduxPageSelector(pages, 'errors');\n  const personnels = useSelector(getPersonnels);\n\n  const handleSubmit = useCallback(\n    ({ name, date, pointSystem, pointAllocation, selectedPersonnels }) => {\n      const data = {\n        name,\n        date: moment(date, 'DDMMYY', true).format('DD-MM-YYYY'),\n        pointSystemId: pointSystem,\n        pointAllocation,\n        personnels: selectedPersonnels.map(person => person.value)\n      };\n      dispatch(createEvent(data));\n      setSubmit(true);\n    },\n    [dispatch]\n  );\n\n  const handleLogout = useCallback(() => {\n    dispatch(logout());\n  }, [dispatch]);\n\n  useEffect(() => {\n    let mounted = true;\n    if (submit && !isAdding && errors.size === 0) {\n      if (mounted) history.replace('/events');\n    }\n    return () => {\n      mounted = false;\n    };\n  }, [errors.size, history, isAdding, submit]);\n\n  return (\n    <Layout>\n      <Helmet>\n        <title>Add Event</title>\n      </Helmet>\n      <Container className=\"py-2\">\n        <Row>\n          <Col>\n            <Breadcrumb tag=\"nav\">\n              <BreadcrumbItem tag={Link} to=\"/events\">\n                Events\n              </BreadcrumbItem>\n              <BreadcrumbItem active tag=\"span\">\n                Add\n              </BreadcrumbItem>\n            </Breadcrumb>\n          </Col>\n        </Row>\n\n        {errors.size > 0 && (\n          <Row>\n            <Col>\n              <Alert color=\"danger\" className=\"w-100\">\n                {errors.map(error => {\n                  return (\n                    <p className=\"mb-0\" key={error}>\n                      {error}\n                    </p>\n                  );\n                })}\n              </Alert>\n            </Col>\n          </Row>\n        )}\n        <Row>\n          <Col>\n            <h1>Add new event</h1>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <EventForm\n              points={points}\n              platoons={platoons}\n              ranks={ranks}\n              statuses={statuses}\n              personnels={personnels}\n              isAdding={isAdding}\n              handleSubmit={handleSubmit}\n              handleLogout={handleLogout}\n            />\n          </Col>\n        </Row>\n      </Container>\n    </Layout>\n  );\n}\n\nexport default memo(Add);\n","import React, { memo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Link, useParams, Redirect } from 'react-router-dom';\nimport {\n  Row,\n  Breadcrumb,\n  BreadcrumbItem,\n  Col,\n  Container,\n  Table,\n  Button\n} from 'reactstrap';\nimport { Helmet } from 'react-helmet';\n\nimport Layout from '../../shared/AppLayout';\n\nexport function Single() {\n  const params = useParams();\n  const personnels = useSelector(state => state.personnels.get('personnels'));\n  const event = useSelector(state =>\n    state.events.get('events').get(params.eventId)\n  );\n\n  if (!event || event.size === 0) {\n    return <Redirect to=\"/events\" />;\n  }\n\n  return (\n    <Layout>\n      <Helmet>\n        <title>Event - Details</title>\n      </Helmet>\n      <Container className=\"py-2\">\n        <Row>\n          <Col>\n            <Breadcrumb tag=\"nav\">\n              <BreadcrumbItem tag={Link} to=\"/events\">\n                Events\n              </BreadcrumbItem>\n              <BreadcrumbItem active tag=\"span\">\n                Details\n              </BreadcrumbItem>\n              <BreadcrumbItem active tag=\"span\">\n                {event.get('name')}\n              </BreadcrumbItem>\n            </Breadcrumb>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-center align-items-center\">\n          <Col xs=\"9\">\n            <h1>Details</h1>\n          </Col>\n          <Col xs=\"3\" className=\"d-flex justify-content-end\">\n            <Button\n              size=\"md\"\n              color=\"primary\"\n              tag={Link}\n              className=\"mr-1\"\n              to={`/events/${event.get('_id')}/edit`}\n            >\n              Edit\n            </Button>\n            <Button\n              size=\"md\"\n              color=\"danger\"\n              tag={Link}\n              to={`/events/${event.get('_id')}/delete`}\n            >\n              Delete\n            </Button>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Table responsive striped>\n              <tbody>\n                <tr>\n                  <th className=\"text-center\">Name</th>\n                  <td className=\"text-center\">{event.get('name')}</td>\n                </tr>\n                <tr>\n                  <th className=\"text-center\">Date</th>\n                  <td className=\"text-center\">{event.get('date')}</td>\n                </tr>\n                <tr>\n                  <th className=\"text-center\">Point System</th>\n                  <td className=\"text-center\">\n                    {event.getIn(['pointSystem', 'name'])}\n                  </td>\n                </tr>\n                <tr>\n                  <th className=\"text-center\">Points Allocation</th>\n                  <td className=\"text-center\">\n                    {event.get('pointsAllocation')}\n                  </td>\n                </tr>\n              </tbody>\n            </Table>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <h3>Personnels</h3>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Table responsive striped>\n              <thead>\n                <tr>\n                  <th className=\"text-center\">Platoon</th>\n                  <th className=\"text-center\">Rank</th>\n                  <th className=\"text-center\">Name</th>\n                </tr>\n              </thead>\n              <tbody>\n                {event.get('personnels').map(personnel => {\n                  const person = personnels.get(personnel.get('_id'));\n                  return (\n                    <tr key={person.get('_id')}>\n                      <td className=\"text-center\">\n                        {person.getIn(['platoon', 'name'])}\n                      </td>\n                      <td className=\"text-center\">\n                        {person.getIn(['rank', 'name'])}\n                      </td>\n                      <td className=\"text-center\">{person.get('name')}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </Table>\n          </Col>\n        </Row>\n      </Container>\n    </Layout>\n  );\n}\n\nexport default memo(Single);\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col, Button, Spinner } from 'reactstrap';\n\nexport function ActionsButtons({ isDeleting, handleCancel, handleConfirm }) {\n  if (isDeleting) {\n    return (\n      <Row>\n        <Col className=\"text-center\">\n          <Spinner size=\"lg\" color=\"primary\" />\n          <p>Deleting...</p>\n        </Col>\n      </Row>\n    );\n  }\n\n  return (\n    <Row>\n      <Col xs=\"6\">\n        <Button\n          color=\"primary\"\n          size=\"lg\"\n          className=\"w-100\"\n          onClick={handleCancel}\n        >\n          Cancel\n        </Button>\n      </Col>\n      <Col xs=\"6\">\n        <Button\n          color=\"danger\"\n          size=\"lg\"\n          className=\"w-100\"\n          onClick={handleConfirm}\n        >\n          Confirm Delete\n        </Button>\n      </Col>\n    </Row>\n  );\n}\n\nActionsButtons.propTypes = {\n  isDeleting: PropTypes.bool.isRequired,\n  handleCancel: PropTypes.func.isRequired,\n  handleConfirm: PropTypes.func.isRequired\n};\n\nexport default memo(ActionsButtons);\n","import React, { useState, useCallback, memo, useMemo } from 'react';\nimport {\n  Container,\n  Row,\n  Col,\n  Alert,\n  Label,\n  Input,\n  FormGroup,\n  Card,\n  CardTitle,\n  CardText\n} from 'reactstrap';\nimport { Helmet } from 'react-helmet';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Redirect, useHistory, useParams } from 'react-router-dom';\nimport useReduxPageSelector from '../../../hooks/useReduxPageSelector';\nimport ActionsButton from '../../../components/events/delete/ActionsButtons';\nimport { deleteEvent } from './actions';\nimport Layout from '../../shared/AppLayout';\n\nexport function Delete() {\n  const history = useHistory();\n  const params = useParams();\n\n  const [revert, setRevert] = useState(false);\n  const events = useSelector(state => state.events.get('events'));\n  const pages = useMemo(() => ['events', 'delete'], []);\n  const isDeleting = useReduxPageSelector(pages, 'isDeleting');\n  const errors = useReduxPageSelector(pages, 'errors');\n\n  const dispatch = useDispatch();\n  const handleRevert = useCallback(({ target: { checked } }) => {\n    setRevert(checked);\n  }, []);\n\n  const handleDelete = useCallback(() => {\n    dispatch(deleteEvent({ eventId: params.eventId, revert }));\n  }, [dispatch, params.eventId, revert]);\n\n  const event = events.get(params.eventId);\n  if (!event || event.size === 0) {\n    return <Redirect to=\"/events\" />;\n  }\n\n  return (\n    <Layout>\n      <Helmet>Delete Event</Helmet>\n      <Container className=\"py-2\">\n        {errors.size !== 0 ? (\n          <Row>\n            <Col>\n              <Alert color=\"danger\" className=\"w-100\">\n                {errors.map(error => {\n                  return (\n                    <p className=\"mb-0\" key={error}>\n                      {error}\n                    </p>\n                  );\n                })}\n              </Alert>\n            </Col>\n          </Row>\n        ) : null}\n        <Row>\n          <Col>\n            <h3 className=\"text-danger\">Deleting event is irreversible!</h3>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            {revert ? (\n              <Alert color=\"danger\">\n                Removing this event will deduct points and remove event date\n                from personnels\n              </Alert>\n            ) : (\n              <Alert color=\"success\">\n                Removing this event will not affect points and event date in\n                personnels\n              </Alert>\n            )}\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Card body>\n              <CardTitle>\n                <p className=\"font-weight-bold mb-0\">Deleting</p>\n              </CardTitle>\n              <CardText>\n                Name: {event.get('name')} <br />\n                Point System: {event.getIn(['pointSystem', 'name'])}\n                <br />\n                Points: {event.get('pointsAllocation')}\n              </CardText>\n            </Card>\n          </Col>\n        </Row>\n        <Row className=\"my-2\">\n          <Col sm={12} md={8} className=\"my-2 align-self-end\">\n            <FormGroup check>\n              <Input\n                type=\"checkbox\"\n                id=\"revertCheckBox\"\n                checked={revert}\n                onChange={handleRevert}\n                disabled={isDeleting}\n              />\n              <Label for=\"revertCheckBox\">Revert Points and Event Date</Label>\n            </FormGroup>\n          </Col>\n          <Col sm={12} md={4} className=\"my-2\">\n            {revert && (\n              <p className=\"font-weight-bold m-0 p-0\">\n                Total Affected Personnels: {event.get('personnels').size}\n              </p>\n            )}\n          </Col>\n        </Row>\n        <ActionsButton\n          handleCancel={history.goBack}\n          handleConfirm={handleDelete}\n          isDeleting={isDeleting}\n        />\n      </Container>\n    </Layout>\n  );\n}\n\nexport default memo(Delete);\n","import { createSelector } from 'reselect';\n\nconst personnelIds = state => state.personnels.get('ids');\nconst allPersonnels = state => state.personnels.get('personnels');\nconst getPersonnels = createSelector(\n  personnelIds,\n  allPersonnels,\n  (ids, byPersonnelIds) => ids.map(id => byPersonnelIds.get(id))\n);\n\nconst allEvents = state => state.events.get('events');\n\nconst getEventById = createSelector(\n  allEvents,\n  (_, id) => id,\n  (eventById, id) => eventById.get(id)\n);\n\nexport { getPersonnels, getEventById };\nexport default getPersonnels;\n","import { useCallback } from 'react';\n\nimport Swal from 'sweetalert2';\n\nfunction useErrorModal(body, timer) {\n  const showModal = useCallback(() => {\n    if (timer) {\n      return Swal.fire({\n        icon: 'error',\n        title: 'Oops...',\n        text: body,\n        timer,\n        timerProgressBar: true\n      });\n    }\n\n    return Swal.fire({\n      icon: 'error',\n      title: 'Oops...',\n      text: body\n    });\n  }, [body, timer]);\n\n  return showModal;\n}\n\nexport default useErrorModal;\n","import React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport { useParams, Link, useHistory, Redirect } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport {\n  Container,\n  Row,\n  Col,\n  Breadcrumb,\n  BreadcrumbItem,\n  Table,\n  Button\n} from 'reactstrap';\nimport Select from 'react-select';\nimport makeAnimated from 'react-select/animated';\nimport moment from 'moment-timezone';\nimport { getPersonnels, getEventById } from './selectors';\nimport { updateEvent } from './actions';\nimport Layout from '../../shared/AppLayout';\nimport useSelectPersonnelsOptionsByDate from '../hooks/useSelectPersonnelsOptionsByDate';\nimport useHandleSetPersonnels from '../hooks/useHandleSetPersonnels';\nimport useSuccessUpdatedModal from '../../../hooks/useSuccessModal';\nimport useErrorModal from '../../../hooks/useErrorModal';\nimport useReduxPageSelector from '../../../hooks/useReduxPageSelector';\nimport usePrevious from '../../../hooks/usePrevious';\n\nconst animatedComponents = makeAnimated();\n\nexport function Edit() {\n  const params = useParams();\n  const history = useHistory();\n  const showSuccessModal = useSuccessUpdatedModal(\n    'Successfully Updated!',\n    2000\n  );\n  const showErrorModal = useErrorModal(\n    'You cannot save with empty personnel',\n    2000\n  );\n  const dispatch = useDispatch();\n  const allPersonnelsList = useSelector(getPersonnels);\n  const personnelsbyId = useSelector(state =>\n    state.personnels.get('personnels')\n  );\n  const event = useSelector(state => getEventById(state, params.eventId));\n  const errors = useReduxPageSelector(['events', 'edit'], 'errors');\n  const isUpdating = useReduxPageSelector(['events', 'edit'], 'isUpdating');\n  const prevUpdating = usePrevious(isUpdating);\n\n  useEffect(() => {\n    if (prevUpdating && !isUpdating && errors.size === 0) {\n      showSuccessModal();\n    }\n  }, [errors.size, isUpdating, prevUpdating, showSuccessModal]);\n\n  const currentEventPersonnels = useMemo(\n    () =>\n      event\n        .get('personnels')\n        .map(eventPersonnel => {\n          const id = eventPersonnel.get('_id');\n          const person = personnelsbyId.get(id);\n          return {\n            value: id,\n            label: `${person.getIn(['platoon', 'name'])} ${person.getIn([\n              'rank',\n              'name'\n            ])} ${person.get('name')}`\n          };\n        })\n        .toArray(),\n    [personnelsbyId, event]\n  );\n\n  const date = useMemo(\n    () => moment(event.get('date'), 'DD-MM-YYYY', true).format('DDMMYY'),\n    [event]\n  );\n\n  const personnelsOption = useSelectPersonnelsOptionsByDate(\n    date,\n    allPersonnelsList,\n    currentEventPersonnels\n  );\n\n  const [personnels, setPersonnels] = useState(currentEventPersonnels);\n  const handleOnChange = useHandleSetPersonnels(date, setPersonnels);\n\n  const handleCancel = useCallback(() => {\n    if (history.length > 1) {\n      return history.goBack();\n    }\n    return history.replace(`/events/${params.eventId}`);\n  }, [history, params.eventId]);\n\n  const handleSave = useCallback(() => {\n    if (personnels.length === 0) {\n      return showErrorModal();\n    }\n    const newPersonnels = personnels.map(person => person.value);\n    return dispatch(updateEvent(params.eventId, newPersonnels));\n  }, [dispatch, params.eventId, personnels, showErrorModal]);\n\n  if (!event || event.size === 0) {\n    return <Redirect to=\"/events\" />;\n  }\n\n  return (\n    <Layout>\n      <Helmet>\n        <title>Edit Event</title>\n      </Helmet>\n      <Container className=\"py-2\">\n        <Row>\n          <Col>\n            <Breadcrumb tag=\"nav\">\n              <BreadcrumbItem tag={Link} to=\"/events\">\n                Events\n              </BreadcrumbItem>\n              <BreadcrumbItem tag=\"span\">Details</BreadcrumbItem>\n              <BreadcrumbItem tag={Link} to={`/events/${params.eventId}`}>\n                {event.get('name')}\n              </BreadcrumbItem>\n              <BreadcrumbItem active tag=\"span\">\n                Edit\n              </BreadcrumbItem>\n            </Breadcrumb>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Table striped responsive>\n              <tbody>\n                <tr>\n                  <th className=\"text-center\">Event Name</th>\n                  <td className=\"text-center\">{event.get('name')}</td>\n                </tr>\n                <tr>\n                  <th className=\"text-center\">Event date</th>\n                  <td className=\"text-center\">{event.get('date')}</td>\n                </tr>\n                <tr>\n                  <th className=\"text-center\">Points allocation</th>\n                  <td className=\"text-center\">\n                    {event.get('pointsAllocation')}\n                  </td>\n                </tr>\n              </tbody>\n            </Table>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <p className=\"mb-0\">Personnels:</p>\n            <Select\n              options={personnelsOption}\n              components={animatedComponents}\n              isMulti\n              id=\"selectedPersonnels\"\n              name=\"selectedPersonnels\"\n              placeholder=\"Select Personnels..\"\n              // value={getSelectedPersonnelsValues}\n              value={personnels}\n              onChange={handleOnChange}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col md=\"6\" className=\"mt-2\">\n            <Button onClick={handleCancel} color=\"primary\" className=\"w-100\">\n              Cancel\n            </Button>\n          </Col>\n          <Col md=\"6\" className=\"mt-2\">\n            <Button color=\"success\" className=\"w-100\" onClick={handleSave}>\n              Save\n            </Button>\n          </Col>\n        </Row>\n      </Container>\n    </Layout>\n  );\n}\n\nexport default Edit;\n","import React, { memo } from 'react';\nimport { Switch, Route, useRouteMatch } from 'react-router-dom';\n\n// SUB-PAGES\nimport All from './all';\nimport Add from './add';\nimport Single from './single';\nimport Delete from './delete';\nimport Edit from './edit';\n\nexport function Events() {\n  const { path } = useRouteMatch();\n  return (\n    <Switch>\n      <Route exact path={path} component={All} />\n      <Route exact path={`${path}/add`} component={Add} />\n      <Route exact path={`${path}/:eventId/delete`} component={Delete} />\n      <Route exact path={`${path}/:eventId/edit`} component={Edit} />\n      <Route exact path={`${path}/:eventId`} component={Single} />\n    </Switch>\n  );\n}\n\nexport default memo(Events);\n","export { default } from './Events';\n"],"sourceRoot":""}