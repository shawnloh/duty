{"version":3,"sources":["hooks/useReduxPageSelector.js","hooks/useDeleteModal.js","hooks/useUpdateModal.js","hooks/useAddModal.js","pages/ranks/selectors.js","components/ranks/SingleRank.jsx","components/ranks/RanksTable.jsx","pages/ranks/Ranks.jsx","pages/ranks/index.js"],"names":["useReduxPageSelector","pages","selector","useSelector","storeState","get","reduce","storePages","page","Map","useUpdateModal","dispatch","deleteFunc","useCallback","id","name","a","async","Swal","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","reverseButtons","value","updateFunc","category","input","inputValue","inputPlaceholder","cancelButtonText","inputValidator","result","showModal","addFunc","getRanks","createSelector","state","ranks","ids","byRankIds","map","memo","rank","handleUpdate","handleDelete","updateRank","deleteRank","className","Button","color","onClick","Table","striped","responsive","style","width","key","useDispatch","errors","actionInProgress","handleAdd","useAddModal","addRank","useDeleteModal","Helmet","Container","size","Row","Col","Alert","error","Spinner","xs","RanksTable"],"mappings":"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","file":"static/js/13.83dd5ff5.chunk.js","sourcesContent":["import { useSelector } from 'react-redux';\nimport { Map } from 'immutable';\n\nfunction useReduxPageSelector(pages, selector) {\n  const state = useSelector(storeState => {\n    if (typeof pages === 'string') {\n      return storeState.pages[pages].get(selector);\n    }\n    const foundPage = pages.reduce((storePages, page) => {\n      if (storePages && storePages[page] !== 'undefined') {\n        return storePages[page];\n      }\n      return Map();\n    }, storeState.pages);\n\n    return foundPage.get(selector);\n  });\n\n  return state;\n}\n\nexport default useReduxPageSelector;\n","import { useCallback } from 'react';\nimport Swal from 'sweetalert2';\n\nfunction useUpdateModal(dispatch, deleteFunc) {\n  const deleteCallBackModal = useCallback(\n    (id, name) => {\n      async function showModal() {\n        const result = await Swal.fire({\n          title: `Are you sure you want to delete ${name}?`,\n          text: \"You won't be able to revert this!\",\n          icon: 'warning',\n          showCancelButton: true,\n          confirmButtonColor: '#dc3545',\n          cancelButtonColor: '#3085d6',\n          confirmButtonText: 'Yes, delete it!',\n          reverseButtons: true\n        });\n        if (result.value) {\n          dispatch(deleteFunc(id));\n        }\n      }\n      showModal();\n    },\n    [deleteFunc, dispatch]\n  );\n  return deleteCallBackModal;\n}\n\nexport default useUpdateModal;\n","import { useCallback } from 'react';\nimport Swal from 'sweetalert2';\n\nfunction useUpdateModal(dispatch, updateFunc, category) {\n  const updateCallBackModal = useCallback(\n    (id, name) => {\n      async function showModal() {\n        const result = await Swal.fire({\n          title: `Enter a new ${category} name for ${name}`,\n          input: 'text',\n          inputValue: '',\n          inputPlaceholder: name,\n          showCancelButton: true,\n          confirmButtonText: 'Update',\n          confirmButtonColor: '#28a745',\n          cancelButtonText: 'Cancel',\n          cancelButtonColor: '#007bff',\n          reverseButtons: true,\n          inputValidator: value => {\n            if (!value) {\n              return `Updating a ${category} name cannot be empty`;\n            }\n            return null;\n          }\n        });\n        if (result.value) {\n          dispatch(updateFunc(id, result.value));\n        }\n      }\n      showModal();\n    },\n    [category, dispatch, updateFunc]\n  );\n  return updateCallBackModal;\n}\n\nexport default useUpdateModal;\n","import { useCallback } from 'react';\nimport Swal from 'sweetalert2';\n\nfunction useUpdateModal(dispatch, addFunc, category) {\n  const deleteCallBackModal = useCallback(() => {\n    async function showModal() {\n      const result = await Swal.fire({\n        title: `Enter a new ${category} name`,\n        input: 'text',\n        inputValue: '',\n        showCancelButton: true,\n        confirmButtonText: 'Add',\n        confirmButtonColor: '#28a745',\n        cancelButtonText: 'Cancel',\n        cancelButtonColor: '#007bff',\n        reverseButtons: true,\n        inputValidator: value => {\n          if (!value) {\n            return 'Name cannot be empty';\n          }\n          return null;\n        }\n      });\n      if (result.value) {\n        dispatch(addFunc(result.value));\n      }\n    }\n    showModal();\n  }, [addFunc, category, dispatch]);\n\n  return deleteCallBackModal;\n}\n\nexport default useUpdateModal;\n","import { createSelector } from 'reselect';\n\nconst rankIds = state => state.ranks.get('ids');\nconst allRanks = state => state.ranks.get('ranks');\nconst getRanks = createSelector(rankIds, allRanks, (ids, byRankIds) =>\n  ids.map(id => byRankIds.get(id))\n);\n\nexport { getRanks };\n\nexport default getRanks;\n","import React, { memo, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'reactstrap';\nimport { Map } from 'immutable';\n\nfunction SingleRank({ rank, handleUpdate, handleDelete }) {\n  const name = rank.get('name');\n  const id = rank.get('_id');\n\n  const updateRank = useCallback(() => {\n    handleUpdate(id, name);\n  }, [handleUpdate, id, name]);\n\n  const deleteRank = useCallback(() => {\n    handleDelete(id, name);\n  }, [handleDelete, id, name]);\n\n  return (\n    <tr>\n      <td className=\"text-center\">{name}</td>\n      <td className=\"text-center\">\n        <Button color=\"primary\" onClick={updateRank}>\n          Edit\n        </Button>{' '}\n        <Button onClick={deleteRank} color=\"danger\">\n          Delete\n        </Button>\n      </td>\n    </tr>\n  );\n}\n\nSingleRank.propTypes = {\n  rank: PropTypes.instanceOf(Map).isRequired,\n  handleUpdate: PropTypes.func.isRequired,\n  handleDelete: PropTypes.func.isRequired\n};\n\nexport default memo(SingleRank);\n","import React, { memo } from 'react';\nimport { Table } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport { List } from 'immutable';\nimport SingleRank from './SingleRank';\n\nconst RankTable = ({ ranks, handleUpdate, handleDelete }) => {\n  return (\n    <Table striped responsive>\n      <thead>\n        <tr>\n          <th className=\"text-center\" style={{ width: '50%' }}>\n            Name\n          </th>\n          <th className=\"text-center\">Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        {ranks.map(rank => {\n          return (\n            <SingleRank\n              key={rank.get('_id')}\n              handleDelete={handleDelete}\n              handleUpdate={handleUpdate}\n              rank={rank}\n            />\n          );\n        })}\n      </tbody>\n    </Table>\n  );\n};\n\nRankTable.propTypes = {\n  ranks: PropTypes.instanceOf(List).isRequired,\n  handleUpdate: PropTypes.func.isRequired,\n  handleDelete: PropTypes.func.isRequired\n};\n\nexport default memo(RankTable);\n","import React, { memo } from 'react';\nimport { Container, Col, Row, Button, Alert, Spinner } from 'reactstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Helmet } from 'react-helmet';\n\nimport { getRanks } from './selectors';\n\nimport Layout from '../shared/AppLayout';\nimport RanksTable from '../../components/ranks/RanksTable';\nimport useUpdateModal from '../../hooks/useUpdateModal';\nimport useAddModal from '../../hooks/useAddModal';\nimport useDeleteModal from '../../hooks/useDeleteModal';\nimport useReduxPageSelector from '../../hooks/useReduxPageSelector';\n\nimport { addRank, deleteRank, updateRank } from './actions';\n\nexport function Ranks() {\n  const dispatch = useDispatch();\n  const ranks = useSelector(getRanks);\n  const errors = useReduxPageSelector('ranks', 'errors');\n  const actionInProgress = useReduxPageSelector('ranks', 'actionInProgress');\n  const handleAdd = useAddModal(dispatch, addRank, 'rank');\n  const handleUpdate = useUpdateModal(dispatch, updateRank, 'rank');\n  const handleDelete = useDeleteModal(dispatch, deleteRank);\n\n  return (\n    <Layout>\n      <Helmet>\n        <title>Ranks</title>\n      </Helmet>\n      <Container className=\"py-2\">\n        {errors.size > 0 && (\n          <Row>\n            <Col>\n              <Alert color=\"danger\" className=\"w-100\">\n                {errors.map(error => {\n                  return (\n                    <p className=\"mb-0\" key={error}>\n                      {error}\n                    </p>\n                  );\n                })}\n              </Alert>\n            </Col>\n          </Row>\n        )}\n        {actionInProgress !== 0 && (\n          <Row>\n            <Col>\n              <Alert color=\"primary\" className=\"w-100\">\n                {actionInProgress} action(s) in progress{' '}\n                <Spinner color=\"primary\" size=\"sm\" />\n              </Alert>\n            </Col>\n          </Row>\n        )}\n        <Row className=\"justify-content-center align-items-center\">\n          <Col xs=\"9\">\n            <h1>Ranks</h1>\n          </Col>\n          <Col xs=\"3\" className=\"d-flex justify-content-end\">\n            <Button color=\"success\" size=\"md\" onClick={handleAdd}>\n              Add\n            </Button>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <RanksTable\n              ranks={ranks}\n              handleUpdate={handleUpdate}\n              handleDelete={handleDelete}\n            />\n          </Col>\n        </Row>\n      </Container>\n    </Layout>\n  );\n}\n\nexport default memo(Ranks);\n","export { default } from './Ranks';\n"],"sourceRoot":""}