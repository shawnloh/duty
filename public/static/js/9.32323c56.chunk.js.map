{"version":3,"sources":["hooks/useReduxPageSelector.js","hooks/useDeleteModal.js","components/commons/Pagination.jsx","hooks/usePrevious.js","hooks/useIsMounted.js","hooks/useSuccessModal.js","components/personnels/all/PersonnelsTable.jsx","components/personnels/all/Search.jsx","pages/personnels/all/selectors.js","pages/personnels/all/All.jsx","pages/personnels/add/selectors.js","components/personnels/add/AddForm.jsx","components/commons/ActionAlert.jsx","pages/personnels/add/Add.jsx","pages/personnels/single/selectors.js","pages/personnels/single/hooks/useHandlePoint.js","components/personnels/single/Details.jsx","components/personnels/single/Tabs.jsx","components/personnels/single/status/StatusTable.jsx","components/personnels/single/status/AddStatus.jsx","components/personnels/single/Status.jsx","components/personnels/single/blockout/BlockoutTable.jsx","components/personnels/single/blockout/AddBlockout.jsx","components/personnels/single/BlockoutDetails.jsx","components/personnels/single/PointsDetails.jsx","pages/personnels/single/Single.jsx","pages/personnels/single/hooks/useHandleStatus.js","pages/personnels/single/hooks/useHandleBlockout.js","pages/personnels/edit/selectors.js","components/personnels/edit/EditForm.jsx","pages/personnels/edit/Edit.jsx","pages/personnels/Personnels.jsx","pages/personnels/index.js"],"names":["useReduxPageSelector","pages","selector","useSelector","storeState","get","reduce","storePages","page","Map","useUpdateModal","dispatch","deleteFunc","useCallback","id","name","a","async","Swal","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","reverseButtons","value","PaginationComponent","rowsPerPage","totalPosts","setPage","pageNumbers","useMemo","i","Math","ceil","push","handlePageClick","selected","length","aria-label","previousLabel","previousClassName","previousLinkClassName","nextLabel","nextClassName","nextLinkClassName","breakLabel","breakClassName","breakLinkClassName","pageCount","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","pageClassName","pageLinkClassName","activeClassName","activeLinkClassName","disabledClassName","usePrevious","ref","useRef","useEffect","current","useIsMounted","isMounted","useSuccessUpdatedModal","bodyText","timer","timerProgressBar","memo","personnels","onDelete","Table","striped","responsive","className","style","width","map","person","rank","getIn","platoon","key","Button","color","tag","Link","to","onClick","search","onChange","onClear","FormGroup","InputGroup","Input","placeholder","InputGroupAddon","addonType","getPersonnels","createSelector","state","ids","byIds","useState","setSearch","path","useRouteMatch","errors","actionInProgress","useDispatch","onChangeSearch","target","clearSearch","handleDelete","useDeleteModal","deletePersonnel","lastIndex","firstIndex","shownPersonnels","slice","searchInput","toLowerCase","filter","indexOf","Container","size","Row","Col","Alert","error","Spinner","xs","Pagination","getRanks","ranks","byRankIds","getPlatoons","platoons","byPlatoonIds","AddFormSchema","Yup","shape","required","handleSubmit","formik","useFormik","initialValues","has","validationSchema","onSubmit","Form","Label","for","type","invalid","touched","values","handleChange","FormFeedback","disabled","isSubmitting","history","useHistory","prevActionInProgress","replace","addPersonnel","Helmet","Breadcrumb","listTag","BreadcrumbItem","active","getStatuses","statuses","useHandleEditPoint","editFunc","personnelId","personnelPointId","newPoint","Details","eventsDate","url","date","defaultProps","List","setTab","activeTab","Nav","tabs","NavItem","NavLink","status","html","toggleDeleteModal","checkDateValid","moment","isValid","today","tz","format","handleAdd","isOpen","setIsOpen","setStatus","startDate","setStartDate","endDate","setEndDate","toggle","Collapse","Card","CardBody","e","stat","FormText","preventDefault","statusId","personStatuses","blockoutDates","validate","isSameOrBefore","AddBlockout","isAddBlockoutOpen","setIsAddBlockoutOpen","isDeleteBlockoutOpen","setIsDeleteBlockoutOpen","tomorrow","add","toggleAdd","open","toggleDelete","addBlockoutFormik","resetForm","deleteBlockoutFormik","BlockoutDetails","sortedBlockoutDate","dates","sort","b","date1","date2","isBefore","isAfter","shownDates","currentPage","handleEdit","points","sortedPoints","textA","String","toUpperCase","textB","point","input","inputPlaceholder","inputValidator","parseInt","pointToEdit","handleEditButtonClick","personId","useParams","setActiveTab","handleDeleteStatus","personnelStatusId","useHandleDeleteStatus","deleteStatus","handleAddStatus","addFunc","useHandleAddStatus","addStatus","handleAddBlockout","useHandleAddBlockout","addBlockout","handleDeleteBlockout","useHandleDeleteBlockout","deleteBlockout","handleEditPoint","editPersonnelPoint","TabContent","TabPane","tabId","Status","getPerson","_","EditFormSchema","isUpdating","params","prevUpdating","successModal","useSuccessModal","personToUpdate","updatePerson","exact","component","All","Add","Single","Edit"],"mappings":"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","file":"static/js/9.32323c56.chunk.js","sourcesContent":["import { useSelector } from 'react-redux';\nimport { Map } from 'immutable';\n\nfunction useReduxPageSelector(pages, selector) {\n  const state = useSelector(storeState => {\n    if (typeof pages === 'string') {\n      return storeState.pages[pages].get(selector);\n    }\n    const foundPage = pages.reduce((storePages, page) => {\n      if (storePages && storePages[page] !== 'undefined') {\n        return storePages[page];\n      }\n      return Map();\n    }, storeState.pages);\n\n    return foundPage.get(selector);\n  });\n\n  return state;\n}\n\nexport default useReduxPageSelector;\n","import { useCallback } from 'react';\nimport Swal from 'sweetalert2';\n\nfunction useUpdateModal(dispatch, deleteFunc) {\n  const deleteCallBackModal = useCallback(\n    (id, name) => {\n      async function showModal() {\n        const result = await Swal.fire({\n          title: `Are you sure you want to delete ${name}?`,\n          text: \"You won't be able to revert this!\",\n          icon: 'warning',\n          showCancelButton: true,\n          confirmButtonColor: '#dc3545',\n          cancelButtonColor: '#3085d6',\n          confirmButtonText: 'Yes, delete it!',\n          reverseButtons: true\n        });\n        if (result.value) {\n          dispatch(deleteFunc(id));\n        }\n      }\n      showModal();\n    },\n    [deleteFunc, dispatch]\n  );\n  return deleteCallBackModal;\n}\n\nexport default useUpdateModal;\n","import React, { useMemo, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactPaginate from 'react-paginate';\n\nconst PaginationComponent = ({ rowsPerPage, totalPosts, setPage }) => {\n  const pageNumbers = useMemo(() => {\n    const page = [];\n    for (let i = 1; i <= Math.ceil(totalPosts / rowsPerPage); i += 1) {\n      page.push(i);\n    }\n    return page;\n  }, [totalPosts, rowsPerPage]);\n  const handlePageClick = useCallback(\n    ({ selected }) => {\n      const pageNumber = selected + 1;\n      setPage(pageNumber);\n    },\n    [setPage]\n  );\n\n  if (pageNumbers.length === 0) {\n    return null;\n  }\n\n  return (\n    <nav aria-label=\"Page pagination\">\n      <ReactPaginate\n        previousLabel=\"&laquo;\"\n        previousClassName=\"page-item\"\n        previousLinkClassName=\"page-link\"\n        nextLabel=\"&raquo;\"\n        nextClassName=\"page-item\"\n        nextLinkClassName=\"page-link\"\n        breakLabel=\"...\"\n        breakClassName=\"page-item\"\n        breakLinkClassName=\"page-link\"\n        pageCount={pageNumbers.length}\n        marginPagesDisplayed={2}\n        pageRangeDisplayed={5}\n        onPageChange={handlePageClick}\n        containerClassName=\"pagination justify-content-center\"\n        pageClassName=\"page-item\"\n        pageLinkClassName=\"page-link\"\n        activeClassName=\"page-item active\"\n        activeLinkClassName=\"page-item active\"\n        disabledClassName=\"page-item disabled\"\n      />\n    </nav>\n  );\n};\n\nPaginationComponent.propTypes = {\n  rowsPerPage: PropTypes.number.isRequired,\n  totalPosts: PropTypes.number.isRequired,\n  setPage: PropTypes.func.isRequired\n};\n\nexport default PaginationComponent;\n","import { useRef, useEffect } from 'react';\n\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  // This will return value before the useEffect update the value\n  return ref.current;\n}\n\nexport default usePrevious;\n","import { useRef, useEffect } from 'react';\n\nfunction useIsMounted() {\n  const isMounted = useRef(true);\n  useEffect(() => {\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  return isMounted;\n}\n\nexport default useIsMounted;\n","import { useCallback } from 'react';\n\nimport Swal from 'sweetalert2';\n\nfunction useSuccessUpdatedModal(bodyText, timer) {\n  const showModal = useCallback(() => {\n    if (timer) {\n      return Swal.fire({\n        title: 'Success!',\n        text: bodyText,\n        icon: 'success',\n        confirmButtonColor: '#007bff',\n        timer: 2000,\n        timerProgressBar: true\n      });\n    }\n\n    return Swal.fire({\n      title: 'Success!',\n      text: bodyText,\n      confirmButtonColor: '#007bff',\n      icon: 'success'\n    });\n  }, [bodyText, timer]);\n\n  return showModal;\n}\n\nexport default useSuccessUpdatedModal;\n","import React, { memo } from 'react';\nimport { Table, Button } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { List } from 'immutable';\n\nconst PersonnelsTable = ({ personnels, onDelete }) => {\n  return (\n    <Table striped responsive>\n      <thead>\n        <tr>\n          <th className=\"text-center\" style={{ width: '50%' }}>\n            Name\n          </th>\n          <th className=\"text-center\">Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        {personnels.map(person => {\n          const rank = person.getIn(['rank', 'name']);\n          const platoon = person.getIn(['platoon', 'name']);\n          const id = person.get('_id');\n          const name = person.get('name');\n          return (\n            <tr key={id}>\n              <td className=\"text-center\">{`${platoon} ${rank} ${name}`}</td>\n              <td className=\"text-center\">\n                <Button color=\"primary\" tag={Link} to={`/personnels/${id}`}>\n                  Edit\n                </Button>{' '}\n                <Button color=\"danger\" onClick={() => onDelete(id, name)}>\n                  Delete\n                </Button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </Table>\n  );\n};\n\nPersonnelsTable.propTypes = {\n  personnels: PropTypes.oneOfType([PropTypes.instanceOf(List)]).isRequired,\n  onDelete: PropTypes.func.isRequired\n};\n\nexport default memo(PersonnelsTable);\n","import React, { memo } from 'react';\nimport {\n  InputGroup,\n  Input,\n  Button,\n  InputGroupAddon,\n  FormGroup\n} from 'reactstrap';\nimport PropTypes from 'prop-types';\n\nconst Search = ({ search, onChange, onClear }) => {\n  return (\n    <FormGroup>\n      <InputGroup>\n        <Input placeholder=\"search...\" value={search} onChange={onChange} />\n        {search !== '' && (\n          <InputGroupAddon addonType=\"append\">\n            <Button color=\"primary\" onClick={onClear}>\n              Clear\n            </Button>\n          </InputGroupAddon>\n        )}\n      </InputGroup>\n    </FormGroup>\n  );\n};\n\nSearch.propTypes = {\n  search: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onClear: PropTypes.func.isRequired\n};\n\nexport default memo(Search);\n","import { createSelector } from 'reselect';\n\nconst personnelIds = state => state.personnels.get('ids');\nconst allPersonnels = state => state.personnels.get('personnels');\nconst getPersonnels = createSelector(\n  personnelIds,\n  allPersonnels,\n  (ids, byIds) => ids.map(id => byIds.get(id))\n);\n\nexport { getPersonnels };\n\nexport default getPersonnels;\n","import React, { useState, useCallback, useMemo, memo } from 'react';\nimport { Container, Row, Col, Button, Alert, Spinner } from 'reactstrap';\nimport Helmet from 'react-helmet';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link, useRouteMatch } from 'react-router-dom';\n\nimport PersonnelsTable from '../../../components/personnels/all/PersonnelsTable';\nimport Pagination from '../../../components/commons/Pagination';\nimport Search from '../../../components/personnels/all/Search';\n// import PersonnelModalDelete from '../../../components/personnels/all/PersonnelModalDelete';\n\nimport { deletePersonnel } from './actions';\nimport { getPersonnels } from './selectors';\nimport useReduxPageSelector from '../../../hooks/useReduxPageSelector';\nimport useDeleteModal from '../../../hooks/useDeleteModal';\n\nexport function All() {\n  const [rowsPerPage] = useState(10);\n  const [page, setPage] = useState(1);\n  const [search, setSearch] = useState('');\n  const { path } = useRouteMatch();\n\n  const personnels = useSelector(getPersonnels);\n  const pages = useMemo(() => ['personnels', 'all'], []);\n  const errors = useReduxPageSelector(pages, 'errors');\n  const actionInProgress = useReduxPageSelector(pages, 'actionInProgress');\n\n  const dispatch = useDispatch();\n\n  const onChangeSearch = useCallback(\n    ({ target: { value } }) => {\n      setSearch(value);\n      if (page !== 1) setPage(1);\n    },\n    [page]\n  );\n  const clearSearch = useCallback(() => {\n    setSearch('');\n  }, []);\n\n  const handleDelete = useDeleteModal(dispatch, deletePersonnel);\n\n  const lastIndex = page * rowsPerPage;\n  const firstIndex = lastIndex - rowsPerPage;\n  const shownPersonnels = useMemo(() => {\n    if (search === '') {\n      return personnels.slice(firstIndex, lastIndex);\n    }\n    const searchInput = search.toLowerCase();\n    const filteredPersonnels = personnels.filter(person => {\n      const name = person.get('name').toLowerCase();\n      const platoon = person.getIn(['platoon', 'name']).toLowerCase();\n      const rank = person.getIn(['rank', 'name']).toLowerCase();\n      return (\n        name.indexOf(searchInput) > -1 ||\n        platoon.indexOf(searchInput) > -1 ||\n        rank.indexOf(searchInput) > -1\n      );\n    });\n\n    return filteredPersonnels.slice(firstIndex, lastIndex);\n  }, [firstIndex, lastIndex, personnels, search]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Personnels</title>P\n      </Helmet>\n      <Container className=\"py-2\">\n        {errors.size > 0 && (\n          <Row>\n            <Col>\n              <Alert color=\"danger\" className=\"w-100\">\n                {errors.map(error => {\n                  return (\n                    <p className=\"mb-0\" key={error}>\n                      {error}\n                    </p>\n                  );\n                })}\n              </Alert>\n            </Col>\n          </Row>\n        )}\n        {actionInProgress !== 0 && (\n          <Row>\n            <Col>\n              <Alert color=\"primary\" className=\"w-100\">\n                {actionInProgress} action(s) in progress{' '}\n                <Spinner color=\"primary\" size=\"sm\" />\n              </Alert>\n            </Col>\n          </Row>\n        )}\n        <Row className=\"justify-content-center align-items-center\">\n          <Col xs=\"9\">\n            <h1>Personnels</h1>\n          </Col>\n          <Col xs=\"3\" className=\"d-flex justify-content-end\">\n            <Button tag={Link} to={`${path}/add`} color=\"success\" size=\"md\">\n              Add\n            </Button>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Search\n              onChange={onChangeSearch}\n              onClear={clearSearch}\n              search={search}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <PersonnelsTable\n              personnels={shownPersonnels}\n              onDelete={handleDelete}\n            />\n          </Col>\n        </Row>\n        <Row className=\"justify-content-center align-items-center\">\n          <Col>\n            <Pagination\n              rowsPerPage={rowsPerPage}\n              setPage={setPage}\n              totalPosts={personnels.size}\n            />\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n}\n\nexport default memo(All);\n","import { createSelector } from 'reselect';\n\nconst rankIds = state => state.ranks.get('ids');\nconst allRanks = state => state.ranks.get('ranks');\nconst getRanks = createSelector(rankIds, allRanks, (ids, byRankIds) =>\n  ids.map(id => byRankIds.get(id))\n);\n\nconst platoonIds = state => state.platoons.get('ids');\nconst allPlatoons = state => state.platoons.get('platoons');\nconst getPlatoons = createSelector(\n  platoonIds,\n  allPlatoons,\n  (ids, byPlatoonIds) => ids.map(id => byPlatoonIds.get(id))\n);\n\nexport { getRanks, getPlatoons };\n","import React, { memo } from 'react';\nimport {\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Button,\n  FormFeedback\n} from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { List } from 'immutable';\n\nconst AddFormSchema = Yup.object().shape({\n  name: Yup.string().required('Name is required'),\n  rank: Yup.string().required('Rank is required'),\n  platoon: Yup.string().required('Platoon is required')\n});\n\nconst AddForm = ({ handleSubmit, ranks, platoons }) => {\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      rank: ranks.has(0) ? ranks.getIn(['0', '_id']) : '',\n      platoon: platoons.has(0) ? platoons.getIn(['0', '_id']) : ''\n    },\n    validationSchema: AddFormSchema,\n    onSubmit: handleSubmit\n  });\n  return (\n    <Form onSubmit={formik.handleSubmit}>\n      <FormGroup>\n        <Label for=\"nameInput\">Name</Label>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          id=\"nameInput\"\n          placeholder=\"John\"\n          invalid={\n            formik.touched.name &&\n            formik.errors.name &&\n            formik.errors.name !== ''\n          }\n          value={formik.values.name}\n          onChange={formik.handleChange}\n        />\n        {formik.touched.name && formik.errors.name ? (\n          <FormFeedback>{formik.errors.name}</FormFeedback>\n        ) : null}\n      </FormGroup>\n      <FormGroup>\n        <Label for=\"rankSelect\">Rank</Label>\n        <Input\n          type=\"select\"\n          name=\"rank\"\n          id=\"rankSelect\"\n          invalid={\n            formik.touched.rank &&\n            formik.errors.rank &&\n            formik.errors.rank !== ''\n          }\n          onChange={formik.handleChange}\n          value={formik.values.rank}\n        >\n          {ranks.map(rank => {\n            return (\n              <option value={rank.get('_id')} key={rank.get('_id')}>\n                {rank.get('name')}\n              </option>\n            );\n          })}\n        </Input>\n        {formik.touched.rank && formik.errors.rank ? (\n          <FormFeedback>{formik.errors.rank}</FormFeedback>\n        ) : null}\n      </FormGroup>\n      <FormGroup>\n        <Label for=\"platoonSelect\">Platoon</Label>\n        <Input\n          type=\"select\"\n          name=\"platoon\"\n          id=\"platoonSelect\"\n          invalid={\n            formik.touched.platoon &&\n            formik.errors.platoon &&\n            formik.errors.platoon !== ''\n          }\n          onChange={formik.handleChange}\n          value={formik.values.platoon}\n        >\n          {platoons.map(platoon => {\n            return (\n              <option value={platoon.get('_id')} key={platoon.get('_id')}>\n                {platoon.get('name')}\n              </option>\n            );\n          })}\n        </Input>\n        {formik.touched.platoon && formik.errors.platoon ? (\n          <FormFeedback>{formik.errors.platoon}</FormFeedback>\n        ) : null}\n      </FormGroup>\n      <Button\n        color=\"success\"\n        className=\"w-100\"\n        disabled={formik.isSubmitting}\n        type=\"submit\"\n      >\n        Submit\n      </Button>\n    </Form>\n  );\n};\n\nAddForm.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n  ranks: PropTypes.instanceOf(List).isRequired,\n  platoons: PropTypes.instanceOf(List).isRequired\n};\nexport default memo(AddForm);\n","import React, { memo } from 'react';\nimport { Alert, Spinner } from 'reactstrap';\nimport PropTypes from 'prop-types';\n\nconst ActionAlert = ({ name }) => {\n  return (\n    <Alert color=\"primary\" className=\"w-100\">\n      {name} in progress <Spinner color=\"primary\" size=\"sm\" />\n    </Alert>\n  );\n};\n\nActionAlert.propTypes = {\n  name: PropTypes.string.isRequired\n};\n\nexport default memo(ActionAlert);\n","import React, { memo, useEffect, useCallback, useMemo } from 'react';\nimport {\n  Container,\n  Row,\n  Col,\n  Breadcrumb,\n  BreadcrumbItem,\n  Alert\n} from 'reactstrap';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useReduxPageSelector from '../../../hooks/useReduxPageSelector';\nimport useIsMounted from '../../../hooks/useIsMounted';\nimport { addPersonnel } from './actions';\nimport { getPlatoons, getRanks } from './selectors';\n\nimport AddForm from '../../../components/personnels/add/AddForm';\nimport ActionAlert from '../../../components/commons/ActionAlert';\n\nexport function Add() {\n  const history = useHistory();\n  const isMounted = useIsMounted();\n\n  const pages = useMemo(() => ['personnels', 'add'], []);\n  const actionInProgress = useReduxPageSelector(pages, 'actionInProgress');\n  const errors = useReduxPageSelector(pages, 'errors');\n\n  const prevActionInProgress = usePrevious(actionInProgress);\n  const ranks = useSelector(getRanks);\n  const platoons = useSelector(getPlatoons);\n  const dispatch = useDispatch();\n\n  // handle redirect to personnels page after creating person\n  useEffect(() => {\n    if (\n      prevActionInProgress &&\n      !actionInProgress &&\n      errors.size === 0 &&\n      isMounted.current\n    ) {\n      history.replace('/personnels');\n    }\n  }, [actionInProgress, errors.size, history, isMounted, prevActionInProgress]);\n\n  const handleSubmit = useCallback(\n    ({ name, platoon, rank }) => {\n      dispatch(addPersonnel(name, platoon, rank));\n    },\n    [dispatch]\n  );\n\n  return (\n    <>\n      <Helmet>\n        <title>Add Personnel</title>\n      </Helmet>\n      <Container className=\"py-2\">\n        <Row className=\"justify-content-center align-items-center\">\n          <Col>\n            <Breadcrumb tag=\"nav\" listTag=\"div\">\n              <BreadcrumbItem tag={Link} to=\"/personnels\">\n                Personnels\n              </BreadcrumbItem>\n              <BreadcrumbItem active tag=\"span\">\n                Add\n              </BreadcrumbItem>\n            </Breadcrumb>\n          </Col>\n        </Row>\n        {ranks.size === 0 ||\n          (platoons.size === 0 && (\n            <Row>\n              <Col>\n                <Alert color=\"danger\">\n                  <Link to=\"/ranks\">Rank</Link> /{' '}\n                  <Link to=\"/platoons\">Platoon</Link> is needed to create\n                  personnels\n                </Alert>\n              </Col>\n            </Row>\n          ))}\n        {errors.length > 0 && (\n          <Row>\n            <Col>\n              <Alert color=\"danger\" className=\"w-100\">\n                {errors.map(error => {\n                  return (\n                    <p className=\"mb-0\" key={error}>\n                      {error}\n                    </p>\n                  );\n                })}\n              </Alert>\n            </Col>\n          </Row>\n        )}\n        {actionInProgress && (\n          <Row>\n            <Col>\n              <ActionAlert name=\"Adding\" />\n            </Col>\n          </Row>\n        )}\n        <Row>\n          <Col>\n            <AddForm\n              handleSubmit={handleSubmit}\n              platoons={platoons}\n              ranks={ranks}\n            />\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n}\n\nexport default memo(Add);\n","import { createSelector } from 'reselect';\n\nconst statusIds = state => state.statuses.get('ids');\nconst allStatuses = state => state.statuses.get('statuses');\nconst getStatuses = createSelector(statusIds, allStatuses, (ids, byIds) =>\n  ids.map(id => byIds.get(id))\n);\n\nexport { getStatuses };\n\nexport default getStatuses;\n","import { useCallback } from 'react';\n\nexport function useHandleEditPoint(dispatch, editFunc, personnelId) {\n  const editPointHandler = useCallback(\n    (personnelPointId, newPoint) => {\n      dispatch(editFunc(personnelId, personnelPointId, newPoint));\n    },\n    [dispatch, editFunc, personnelId]\n  );\n  return editPointHandler;\n}\n\nexport default useHandleEditPoint;\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Button } from 'reactstrap';\nimport { Link, useRouteMatch } from 'react-router-dom';\nimport { List } from 'immutable';\n\nconst Details = ({ name, rank, platoon, eventsDate }) => {\n  const { url } = useRouteMatch();\n  return (\n    <>\n      <Table striped responsive>\n        <tbody>\n          <tr>\n            <th className=\"text-center\">Name:</th>\n            <td className=\"text-center\">{name}</td>\n          </tr>\n          <tr>\n            <th className=\"text-center\">Rank:</th>\n            <td className=\"text-center\">{rank}</td>\n          </tr>\n          <tr>\n            <th className=\"text-center\">Platoon:</th>\n            <td className=\"text-center\">{platoon}</td>\n          </tr>\n        </tbody>\n      </Table>\n      <Button\n        tag={Link}\n        to={`${url}/edit`}\n        color=\"primary\"\n        className=\"w-100 my-2\"\n      >\n        Edit Details\n      </Button>\n      <Table striped responsive>\n        <thead>\n          <tr>\n            <th>Event Dates:</th>\n          </tr>\n        </thead>\n        <tbody>\n          {eventsDate.map(date => {\n            return (\n              <tr key={date}>\n                <td className=\"text-center\">{date}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n\nDetails.defaultProps = {\n  eventsDate: List()\n};\n\nDetails.propTypes = {\n  name: PropTypes.string.isRequired,\n  rank: PropTypes.string.isRequired,\n  platoon: PropTypes.string.isRequired,\n  eventsDate: PropTypes.oneOfType([PropTypes.instanceOf(List)])\n};\n\nexport default memo(Details);\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Nav, NavItem, NavLink } from 'reactstrap';\n\nconst Tabs = ({ setTab, activeTab }) => {\n  return (\n    <Nav tabs>\n      <NavItem>\n        <NavLink\n          className={activeTab === '1' ? 'active' : ''}\n          onClick={() => {\n            setTab('1');\n          }}\n        >\n          Info\n        </NavLink>\n      </NavItem>\n      <NavItem>\n        <NavLink\n          className={activeTab === '2' ? 'active' : ''}\n          onClick={() => {\n            setTab('2');\n          }}\n        >\n          Status\n        </NavLink>\n      </NavItem>\n      <NavItem>\n        <NavLink\n          className={activeTab === '3' ? 'active' : ''}\n          onClick={() => {\n            setTab('3');\n          }}\n        >\n          Blockout dates\n        </NavLink>\n      </NavItem>\n      <NavItem>\n        <NavLink\n          className={activeTab === '4' ? 'active' : ''}\n          onClick={() => {\n            setTab('4');\n          }}\n        >\n          Points\n        </NavLink>\n      </NavItem>\n    </Nav>\n  );\n};\n\nTabs.propTypes = {\n  setTab: PropTypes.func.isRequired,\n  activeTab: PropTypes.string.isRequired\n};\n\nexport default memo(Tabs);\n","import React, { memo } from 'react';\nimport { Row, Col, Table, Button } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport Swal from 'sweetalert2';\nimport { List } from 'immutable';\n\nconst toggleDeleteModal = async (status, handleDelete) => {\n  const { value: confirm } = await Swal.fire({\n    title: 'Are you sure?',\n    html: `\n      <p class=\"font-weight-bold\">You won't be able to revert this!</p>\n      <p>You are deleting:</p>\n      <p>${status.getIn(['statusId', 'name'])}</p>\n      <p>Date: ${status.get('startDate')} - ${status.get('endDate')}</p>\n      `,\n    icon: 'warning',\n    showCancelButton: true,\n    cancelButtonColor: '#3085d6',\n    confirmButtonColor: '#d33',\n    confirmButtonText: 'Delete'\n  });\n  if (confirm) {\n    handleDelete(status.get('_id'));\n  }\n};\n\nconst StatusTable = ({ statuses, handleDelete }) => {\n  return (\n    <Row>\n      <Col>\n        <Table striped responsive>\n          <thead>\n            <tr>\n              <th>Status</th>\n              <th>Start date</th>\n              <th>End date</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {statuses.map(status => {\n              return (\n                <tr key={status.get('_id')}>\n                  <th>{status.getIn(['statusId', 'name'])}</th>\n                  <td>{status.get('startDate')}</td>\n                  <td>{status.get('endDate')}</td>\n                  <td>\n                    <Button\n                      color=\"danger\"\n                      onClick={() => {\n                        toggleDeleteModal(status, handleDelete);\n                      }}\n                    >\n                      Delete\n                    </Button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </Col>\n    </Row>\n  );\n};\nStatusTable.propTypes = {\n  statuses: PropTypes.oneOfType([PropTypes.instanceOf(List)]).isRequired,\n  handleDelete: PropTypes.func.isRequired\n};\nexport default memo(StatusTable);\n","import React, { useState, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Row,\n  Button,\n  Collapse,\n  Card,\n  CardBody,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  FormText\n} from 'reactstrap';\nimport moment from 'moment-timezone';\nimport { List } from 'immutable';\n\nconst checkDateValid = date => {\n  return (\n    moment(date, 'DDMMYY', true).isValid() || date.toLowerCase() === 'permanent'\n  );\n};\nconst today = moment()\n  .tz('Asia/Singapore')\n  .format('DDMMYY');\n\nconst AddStatus = ({ handleAdd, statuses }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [status, setStatus] = useState(\n    statuses.has(0) ? statuses.getIn(['0', '_id']) : ''\n  );\n  const [startDate, setStartDate] = useState(today);\n  const [endDate, setEndDate] = useState(today);\n\n  const toggle = () => {\n    setIsOpen(!isOpen);\n    setStatus(statuses.has(0) ? statuses.getIn(['0', '_id']) : '');\n    setStartDate(today);\n    setEndDate(today);\n  };\n  const changeStatus = e => setStatus(e.target.value);\n  const changeStartDate = e => setStartDate(e.target.value);\n  const changeEndDate = e => setEndDate(e.target.value);\n\n  const submit = e => {\n    if (e) e.preventDefault();\n    handleAdd({\n      statusId: status,\n      startDate,\n      endDate\n    });\n    toggle();\n  };\n\n  const checkDisabled = () => {\n    return (\n      !checkDateValid(startDate) || !checkDateValid(endDate) || status === ''\n    );\n  };\n\n  return (\n    <>\n      <Row className=\"flex-column justify-content-end align-items-end my-2 mx-2\">\n        <Button className=\"my-2\" color=\"primary\" onClick={toggle}>\n          Add Status\n        </Button>\n        <Collapse isOpen={isOpen} className=\"w-100\">\n          <Card>\n            <CardBody>\n              <Form>\n                <FormGroup>\n                  <Label for=\"statusSelect\">Status</Label>\n                  <Input\n                    type=\"select\"\n                    value={status}\n                    name=\"select\"\n                    id=\"statusSelect\"\n                    onChange={changeStatus}\n                  >\n                    {statuses.map(stat => {\n                      return (\n                        <option value={stat.get('_id')} key={stat.get('_id')}>\n                          {stat.get('name')}\n                        </option>\n                      );\n                    })}\n                  </Input>\n                </FormGroup>\n                <FormGroup>\n                  <Label for=\"startDateInput\">Start date</Label>\n                  <Input\n                    type=\"text\"\n                    value={startDate}\n                    name=\"startDate\"\n                    id=\"startDateInput\"\n                    invalid={!checkDateValid(startDate)}\n                    onChange={changeStartDate}\n                  />\n                </FormGroup>\n                <FormGroup>\n                  <Label for=\"endDateInput\">End date</Label>\n                  <Input\n                    type=\"text\"\n                    value={endDate}\n                    name=\"endDate\"\n                    id=\"endDateInput\"\n                    invalid={!checkDateValid(endDate)}\n                    onChange={changeEndDate}\n                  />\n                  <FormText color=\"muted\">\n                    Dates must be in DDMMYY format, it will be automatically be\n                    converted to DD-MM-YYYY\n                  </FormText>\n                  <FormText color=\"muted\">\n                    If permanent, please indicate permanent in end date\n                  </FormText>\n                </FormGroup>\n                <Button\n                  color=\"success\"\n                  className=\"w-100\"\n                  onClick={submit}\n                  disabled={checkDisabled()}\n                >\n                  Add\n                </Button>\n              </Form>\n            </CardBody>\n          </Card>\n        </Collapse>\n      </Row>\n    </>\n  );\n};\n\nAddStatus.propTypes = {\n  handleAdd: PropTypes.func.isRequired,\n  statuses: PropTypes.oneOfType([PropTypes.instanceOf(List).isRequired])\n    .isRequired\n};\n\nexport default memo(AddStatus);\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { List } from 'immutable';\nimport StatusTable from './status/StatusTable';\nimport AddStatus from './status/AddStatus';\n\nconst PersonnelStatus = ({\n  personStatuses,\n  statuses,\n  handleAdd,\n  handleDelete\n}) => {\n  return (\n    <>\n      <AddStatus handleAdd={handleAdd} statuses={statuses} />\n      <StatusTable statuses={personStatuses} handleDelete={handleDelete} />\n    </>\n  );\n};\n\nPersonnelStatus.propTypes = {\n  personStatuses: PropTypes.oneOfType([PropTypes.instanceOf(List)]).isRequired,\n  handleDelete: PropTypes.func.isRequired,\n  handleAdd: PropTypes.func.isRequired,\n  statuses: PropTypes.oneOfType([PropTypes.instanceOf(List).isRequired])\n    .isRequired\n};\n\nexport default memo(PersonnelStatus);\n","import React, { memo } from 'react';\nimport { Table, Button } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport { List } from 'immutable';\n\nconst BlockoutTable = ({ handleDelete, blockoutDates }) => {\n  return (\n    <Table striped responsive>\n      <thead>\n        <tr>\n          <th className=\"text-center\">Blockout Dates:</th>\n          <th className=\"text-center\">Action:</th>\n        </tr>\n      </thead>\n      <tbody>\n        {blockoutDates.map(date => {\n          return (\n            <tr key={date}>\n              <td className=\"text-center\">{date}</td>\n              <td className=\"text-center\">\n                <Button\n                  color=\"danger\"\n                  onClick={() => handleDelete({ startDate: date })}\n                >\n                  Delete\n                </Button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </Table>\n  );\n};\n\nBlockoutTable.propTypes = {\n  handleDelete: PropTypes.func.isRequired,\n  blockoutDates: PropTypes.oneOfType([PropTypes.instanceOf(List)]).isRequired\n};\n\nexport default memo(BlockoutTable);\n","import React, { useState, useMemo, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Row,\n  Button,\n  Collapse,\n  Card,\n  CardBody,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  FormText,\n  FormFeedback\n} from 'reactstrap';\nimport moment from 'moment-timezone';\nimport { useFormik } from 'formik';\n\nconst validate = values => {\n  const errors = {};\n  if (!values.startDate) {\n    errors.startDate = 'Date is required';\n  } else if (!moment(values.startDate, 'DDMMYY', true).isValid()) {\n    errors.startDate = 'Date is not in a valid format';\n  }\n\n  if (values.endDate) {\n    const endDate = moment(values.endDate, 'DDMMYY', true);\n    if (!endDate.isValid()) {\n      errors.endDate = 'Until date is not valid format';\n    } else if (\n      endDate.isSameOrBefore(moment(values.startDate, 'DDMMYY', true))\n    ) {\n      errors.endDate = 'Until date must be after starting date';\n    }\n  }\n  return errors;\n};\n\nconst AddBlockout = ({ handleAdd, handleDelete }) => {\n  const [isAddBlockoutOpen, setIsAddBlockoutOpen] = useState(false);\n  const [isDeleteBlockoutOpen, setIsDeleteBlockoutOpen] = useState(false);\n  const today = useMemo(\n    () =>\n      moment()\n        .tz('Asia/Singapore')\n        .format('DDMMYY'),\n    []\n  );\n\n  const tomorrow = useMemo(\n    () =>\n      moment()\n        .tz('Asia/Singapore')\n        .add(1, 'd')\n        .format('DDMMYY'),\n    []\n  );\n  const toggleAdd = useCallback(() => {\n    setIsAddBlockoutOpen(open => !open);\n    if (isDeleteBlockoutOpen) setIsDeleteBlockoutOpen(false);\n  }, [isDeleteBlockoutOpen]);\n\n  const toggleDelete = useCallback(() => {\n    setIsDeleteBlockoutOpen(open => !open);\n    if (isAddBlockoutOpen) setIsAddBlockoutOpen(false);\n  }, [isAddBlockoutOpen]);\n\n  const addBlockoutFormik = useFormik({\n    initialValues: {\n      startDate: '',\n      endDate: ''\n    },\n    validate,\n    onSubmit: (values, { resetForm }) => {\n      handleAdd(values);\n      toggleAdd();\n      resetForm();\n    }\n  });\n  const deleteBlockoutFormik = useFormik({\n    initialValues: {\n      startDate: '',\n      endDate: ''\n    },\n    validate,\n    onSubmit: (values, { resetForm }) => {\n      handleDelete(values);\n      toggleDelete();\n      resetForm();\n    }\n  });\n\n  return (\n    <>\n      <Row className=\"justify-content-end align-items-end my-2 mx-2\">\n        <Button className=\"m-2\" color=\"primary\" onClick={toggleAdd}>\n          Add Blockout\n        </Button>\n        <Button className=\"m-2\" color=\"primary\" onClick={toggleDelete}>\n          Delete Blockout\n        </Button>\n      </Row>\n      <Row>\n        <Collapse isOpen={isAddBlockoutOpen} className=\"w-100\">\n          <Card>\n            <CardBody>\n              <Form onSubmit={addBlockoutFormik.handleSubmit}>\n                <FormGroup>\n                  <Label for=\"addDateInput\">Date</Label>\n                  <Input\n                    type=\"text\"\n                    value={addBlockoutFormik.values.startDate}\n                    name=\"startDate\"\n                    id=\"addDateInput\"\n                    placeholder={`e.g. ${today}`}\n                    invalid={\n                      addBlockoutFormik.touched.startDate &&\n                      addBlockoutFormik.errors.startDate &&\n                      addBlockoutFormik.errors.startDate !== ''\n                    }\n                    onChange={addBlockoutFormik.handleChange}\n                  />\n                  <FormText color=\"muted\">\n                    Date must be in DDMMYY format\n                  </FormText>\n                  {addBlockoutFormik.touched.startDate &&\n                  addBlockoutFormik.errors.startDate ? (\n                    <FormFeedback>\n                      {addBlockoutFormik.errors.startDate}\n                    </FormFeedback>\n                  ) : null}\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"addUntilDateInput\">Until</Label>\n                  <Input\n                    type=\"text\"\n                    value={addBlockoutFormik.values.endDate}\n                    name=\"endDate\"\n                    id=\"addUntilDateInput\"\n                    placeholder={`*OPTIONAL* e.g. ${tomorrow}`}\n                    invalid={\n                      addBlockoutFormik.touched.endDate &&\n                      addBlockoutFormik.errors.endDate &&\n                      addBlockoutFormik.errors.endDate !== ''\n                    }\n                    onChange={addBlockoutFormik.handleChange}\n                  />\n                  <FormText color=\"muted\">\n                    This is optional, you can leave this blank if you want to\n                    add a single date\n                  </FormText>\n                  {addBlockoutFormik.touched.endDate &&\n                  addBlockoutFormik.errors.endDate ? (\n                    <FormFeedback>\n                      {addBlockoutFormik.errors.endDate}\n                    </FormFeedback>\n                  ) : null}\n                </FormGroup>\n                <Button color=\"success\" className=\"w-100\" type=\"submit\">\n                  Add\n                </Button>\n              </Form>\n            </CardBody>\n          </Card>\n        </Collapse>\n\n        <Collapse isOpen={isDeleteBlockoutOpen} className=\"w-100\">\n          <Card>\n            <CardBody>\n              <Form onSubmit={deleteBlockoutFormik.handleSubmit}>\n                <FormGroup>\n                  <Label for=\"deleteDateInput\">Date</Label>\n                  <Input\n                    type=\"text\"\n                    value={deleteBlockoutFormik.values.startDate}\n                    name=\"startDate\"\n                    id=\"deleteDateInput\"\n                    placeholder={`e.g. ${today}`}\n                    invalid={\n                      deleteBlockoutFormik.touched.startDate &&\n                      deleteBlockoutFormik.errors.startDate &&\n                      deleteBlockoutFormik.errors.startDate !== ''\n                    }\n                    onChange={deleteBlockoutFormik.handleChange}\n                  />\n                  <FormText color=\"muted\">\n                    Date must be in DDMMYY format\n                  </FormText>\n                  {deleteBlockoutFormik.touched.startDate &&\n                  deleteBlockoutFormik.errors.startDate ? (\n                    <FormFeedback>\n                      {deleteBlockoutFormik.errors.startDate}\n                    </FormFeedback>\n                  ) : null}\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"deleteUntilDateInput\">Until</Label>\n                  <Input\n                    type=\"text\"\n                    value={deleteBlockoutFormik.values.endDate}\n                    name=\"endDate\"\n                    id=\"deleteUntilDateInput\"\n                    placeholder={`*OPTIONAL* e.g. ${tomorrow}`}\n                    invalid={\n                      deleteBlockoutFormik.touched.endDate &&\n                      deleteBlockoutFormik.errors.endDate &&\n                      deleteBlockoutFormik.errors.endDate !== ''\n                    }\n                    onChange={deleteBlockoutFormik.handleChange}\n                  />\n                  <FormText color=\"muted\">\n                    This is optional, you can leave this blank if you want to\n                    remove a single date\n                  </FormText>\n                  {deleteBlockoutFormik.touched.endDate &&\n                  deleteBlockoutFormik.errors.endDate ? (\n                    <FormFeedback>\n                      {deleteBlockoutFormik.errors.endDate}\n                    </FormFeedback>\n                  ) : null}\n                </FormGroup>\n                <Button color=\"danger\" className=\"w-100\" type=\"submit\">\n                  Remove\n                </Button>\n              </Form>\n            </CardBody>\n          </Card>\n        </Collapse>\n      </Row>\n    </>\n  );\n};\n\nAddBlockout.propTypes = {\n  handleAdd: PropTypes.func.isRequired,\n  handleDelete: PropTypes.func.isRequired\n};\n\nexport default AddBlockout;\n","import React, { useState, useMemo, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col } from 'reactstrap';\nimport moment from 'moment-timezone';\nimport { List } from 'immutable';\nimport BlockoutTable from './blockout/BlockoutTable';\nimport AddBlockout from './blockout/AddBlockout';\nimport Pagination from '../../commons/Pagination';\n\nfunction BlockoutDetails({ blockoutDates, handleDelete, handleAdd }) {\n  const [rowsPerPage] = useState(5);\n  const [page, setPage] = useState(1);\n  const sortedBlockoutDate = useMemo(() => {\n    const dates = blockoutDates;\n    dates.sort((a, b) => {\n      const date1 = moment(a, 'DD-MM-YYYY', true);\n      const date2 = moment(b, 'DD-MM-YYYY', true);\n\n      if (date1.isBefore(date2)) {\n        return -1;\n      }\n      if (date1.isAfter(date2)) {\n        return 1;\n      }\n\n      return 0;\n    });\n    return dates;\n  }, [blockoutDates]);\n\n  const lastIndex = page * rowsPerPage;\n  const firstIndex = lastIndex - rowsPerPage;\n  const shownDates = sortedBlockoutDate.slice(firstIndex, lastIndex);\n  return (\n    <>\n      <AddBlockout handleAdd={handleAdd} handleDelete={handleDelete} />\n      {sortedBlockoutDate.length === 0 ? (\n        <h3 className=\"my-2\">No blockout date for this personnel</h3>\n      ) : (\n        <BlockoutTable handleDelete={handleDelete} blockoutDates={shownDates} />\n      )}\n      <Row>\n        <Col className=\"d-flex justify-content-center align-items-center\">\n          <Pagination\n            currentPage={page}\n            rowsPerPage={rowsPerPage}\n            totalPosts={blockoutDates.size}\n            setPage={setPage}\n          />\n        </Col>\n      </Row>\n    </>\n  );\n}\n\nBlockoutDetails.defaultProps = {\n  blockoutDates: List()\n};\n\nBlockoutDetails.propTypes = {\n  // blockoutDates: PropTypes.arrayOf(PropTypes.string),\n  blockoutDates: PropTypes.instanceOf(List),\n  handleDelete: PropTypes.func.isRequired,\n  handleAdd: PropTypes.func.isRequired\n};\n\nexport default memo(BlockoutDetails);\n","import React, { useMemo, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Button } from 'reactstrap';\nimport Swal from 'sweetalert2';\nimport { List } from 'immutable';\n\nconst handleEditButtonClick = async (point, handleEdit) => {\n  const { value: pointToEdit } = await Swal.fire({\n    title: `Enter new point for ${point.getIn(['pointSystem', 'name'])}`,\n    input: 'number',\n    inputPlaceholder: point.get('points'),\n    showCancelButton: true,\n    confirmButtonText: 'Change',\n    inputValidator: value => {\n      if (!value) {\n        return `Please enter a new number for ${point.getIn([\n          'pointSystem',\n          'name'\n        ])}`;\n      }\n      const newPoint = parseInt(value, 10);\n      if (typeof newPoint !== 'number') {\n        return `Only numbers are accepted`;\n      }\n\n      if (newPoint < 0) {\n        return 'Only positive number is allowed inclusive of 0';\n      }\n      return null;\n    }\n  });\n  if (pointToEdit) {\n    handleEdit(point.get('_id'), pointToEdit);\n  }\n};\n\nconst PointsDetails = ({ handleEdit, points }) => {\n  const sortedPoints = useMemo(() => {\n    const sortingPoints = points.sort((a, b) => {\n      const textA = String(a.getIn(['pointSystem', 'name'])).toUpperCase();\n      const textB = String(b.getIn(['pointSystem', 'name'])).toUpperCase();\n      if (textA < textB) {\n        return -1;\n      }\n      if (textA > textB) {\n        return 1;\n      }\n      return 0;\n    });\n    return sortingPoints;\n  }, [points]);\n\n  return (\n    <Table striped responsive>\n      <thead>\n        <tr>\n          <th className=\"text-center\">Point System:</th>\n          <th className=\"text-center\">Point:</th>\n          <th className=\"text-center\">Action:</th>\n        </tr>\n      </thead>\n      <tbody>\n        {sortedPoints.map(point => {\n          return (\n            <tr key={point.get('_id')}>\n              <td className=\"text-center\">\n                {point.getIn(['pointSystem', 'name'])}\n              </td>\n              <td className=\"text-center\">{point.get('points')}</td>\n              <td className=\"text-center\">\n                <Button\n                  color=\"primary\"\n                  onClick={() => handleEditButtonClick(point, handleEdit)}\n                >\n                  Edit\n                </Button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </Table>\n  );\n};\n\nPointsDetails.propTypes = {\n  handleEdit: PropTypes.func.isRequired,\n  points: PropTypes.oneOfType([PropTypes.instanceOf(List)]).isRequired\n};\n\nexport default memo(PointsDetails);\n","import React, { useState, memo, useMemo } from 'react';\nimport {\n  Container,\n  Row,\n  Col,\n  TabContent,\n  TabPane,\n  Breadcrumb,\n  BreadcrumbItem,\n  Alert\n} from 'reactstrap';\nimport { Link, Redirect, useParams } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport {\n  addStatus,\n  deleteStatus,\n  addBlockout,\n  deleteBlockout,\n  editPersonnelPoint\n} from './actions';\nimport { getStatuses } from './selectors';\nimport useReduxPageSelector from '../../../hooks/useReduxPageSelector';\nimport {\n  useHandleAddStatus,\n  useHandleDeleteStatus\n} from './hooks/useHandleStatus';\nimport {\n  useHandleAddBlockout,\n  useHandleDeleteBlockout\n} from './hooks/useHandleBlockout';\nimport { useHandleEditPoint } from './hooks/useHandlePoint';\n\nimport Details from '../../../components/personnels/single/Details';\nimport Tabs from '../../../components/personnels/single/Tabs';\nimport Status from '../../../components/personnels/single/Status';\nimport ActionAlert from '../../../components/commons/ActionAlert';\nimport BlockoutDetails from '../../../components/personnels/single/BlockoutDetails';\nimport PointsDetails from '../../../components/personnels/single/PointsDetails';\n\nexport function Single() {\n  const params = useParams();\n  const personId = params.personnelId;\n\n  const [activeTab, setActiveTab] = useState('1');\n  const statuses = useSelector(getStatuses);\n  const personnels = useSelector(state => state.personnels.get('personnels'));\n  const pages = useMemo(() => ['personnels', 'single'], []);\n  const actionInProgress = useReduxPageSelector(pages, 'actionInProgress');\n  const errors = useReduxPageSelector(pages, 'errors');\n  const dispatch = useDispatch();\n  const handleDeleteStatus = useHandleDeleteStatus(\n    dispatch,\n    deleteStatus,\n    personId\n  );\n  const handleAddStatus = useHandleAddStatus(dispatch, addStatus, personId);\n  const handleAddBlockout = useHandleAddBlockout(\n    dispatch,\n    addBlockout,\n    personId\n  );\n  const handleDeleteBlockout = useHandleDeleteBlockout(\n    dispatch,\n    deleteBlockout,\n    personId\n  );\n  const handleEditPoint = useHandleEditPoint(\n    dispatch,\n    editPersonnelPoint,\n    personId\n  );\n\n  const person = personnels.get(personId);\n  if (!person || person.size === 0) {\n    return <Redirect to=\"/personnels\" />;\n  }\n  return (\n    <Container className=\"py-2\">\n      <Row className=\"justify-content-center align-items-center\">\n        <Col>\n          <Breadcrumb tag=\"nav\" listTag=\"div\">\n            <BreadcrumbItem tag={Link} to=\"/personnels\">\n              Personnels\n            </BreadcrumbItem>\n            <BreadcrumbItem tag=\"span\">Details</BreadcrumbItem>\n            <BreadcrumbItem active tag=\"span\">\n              {person.name}\n            </BreadcrumbItem>\n          </Breadcrumb>\n        </Col>\n      </Row>\n      {errors.size > 0 && (\n        <Row className=\"my-2 flex-column\">\n          <Col>\n            <Alert color=\"danger\" className=\"w-100\">\n              {errors.map(error => {\n                return (\n                  <p className=\"mb-0\" key={error}>\n                    {error}\n                  </p>\n                );\n              })}\n            </Alert>\n          </Col>\n        </Row>\n      )}\n      {actionInProgress !== 0 && (\n        <Row>\n          <Col>\n            <ActionAlert name={`${actionInProgress} action(s)`} />\n          </Col>\n        </Row>\n      )}\n      <Row className=\"align-items-center\">\n        <Col>\n          <h1>Details</h1>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <p className=\"text-danger\">\n            Note: Event dates, status and blockout dates that expired will be\n            automatically removed\n          </p>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Tabs activeTab={activeTab} setTab={setActiveTab} />\n          <TabContent activeTab={activeTab}>\n            <TabPane tabId=\"1\">\n              <Details\n                name={person.get('name')}\n                rank={person.getIn(['rank', 'name'])}\n                platoon={person.getIn(['platoon', 'name'])}\n                eventsDate={person.get('eventsDate')}\n              />\n            </TabPane>\n            <TabPane tabId=\"2\">\n              <Status\n                handleDelete={handleDeleteStatus}\n                personStatuses={person.get('statuses')}\n                statuses={statuses}\n                handleAdd={handleAddStatus}\n              />\n            </TabPane>\n            <TabPane tabId=\"3\">\n              <BlockoutDetails\n                handleAdd={handleAddBlockout}\n                blockoutDates={person.get('blockOutDates')}\n                handleDelete={handleDeleteBlockout}\n              />\n            </TabPane>\n            <TabPane tabId=\"4\">\n              <PointsDetails\n                points={person.get('points')}\n                handleEdit={handleEditPoint}\n              />\n            </TabPane>\n          </TabContent>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default memo(Single);\n","import { useCallback } from 'react';\n\nexport function useHandleAddStatus(dispatch, addFunc, personnelId) {\n  const addHandler = useCallback(\n    ({ statusId, startDate, endDate }) => {\n      dispatch(addFunc(personnelId, statusId, startDate, endDate));\n    },\n    [addFunc, dispatch, personnelId]\n  );\n\n  return addHandler;\n}\n\nexport function useHandleDeleteStatus(dispatch, deleteFunc, personnelId) {\n  const deleteHandler = useCallback(\n    personnelStatusId => {\n      dispatch(deleteFunc(personnelId, personnelStatusId));\n    },\n    [deleteFunc, dispatch, personnelId]\n  );\n\n  return deleteHandler;\n}\n","import { useCallback } from 'react';\n\nexport function useHandleAddBlockout(dispatch, addFunc, personnelId) {\n  const addHandler = useCallback(\n    ({ startDate, endDate = null }) => {\n      const date = {\n        startDate\n      };\n\n      if (endDate) {\n        date.endDate = endDate;\n      }\n\n      dispatch(addFunc(personnelId, date));\n    },\n    [addFunc, dispatch, personnelId]\n  );\n\n  return addHandler;\n}\n\nexport function useHandleDeleteBlockout(dispatch, deleteFunc, personnelId) {\n  const deleteHandle = useCallback(\n    ({ startDate, endDate = null }) => {\n      const date = {\n        startDate\n      };\n\n      if (endDate) {\n        date.endDate = endDate;\n      }\n      dispatch(deleteFunc(personnelId, date));\n    },\n    [deleteFunc, dispatch, personnelId]\n  );\n  return deleteHandle;\n}\n","import { createSelector } from 'reselect';\n\nconst getPerson = createSelector(\n  state => state.personnels.get('personnels'),\n  (_, personnelId) => personnelId,\n  (personnels, id) => personnels.get(id)\n);\n\nconst rankIds = state => state.ranks.get('ids');\nconst allRanks = state => state.ranks.get('ranks');\nconst getRanks = createSelector(rankIds, allRanks, (ids, byRankIds) =>\n  ids.map(id => byRankIds.get(id))\n);\n\nconst platoonIds = state => state.platoons.get('ids');\nconst allPlatoons = state => state.platoons.get('platoons');\nconst getPlatoons = createSelector(\n  platoonIds,\n  allPlatoons,\n  (ids, byPlatoonIds) => ids.map(id => byPlatoonIds.get(id))\n);\n\nexport { getPerson, getRanks, getPlatoons };\n","import React, { memo } from 'react';\nimport {\n  Label,\n  FormGroup,\n  FormFeedback,\n  Input,\n  Form,\n  Button\n} from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport { useFormik } from 'formik';\nimport { List, Map } from 'immutable';\nimport * as Yup from 'yup';\n\nconst EditFormSchema = Yup.object().shape({\n  name: Yup.string().required('Name is required'),\n  rank: Yup.string().required('Rank is required'),\n  platoon: Yup.string().required('Platoon is required')\n});\n\nconst EditForm = ({ person, handleSubmit, ranks, platoons, isUpdating }) => {\n  const formik = useFormik({\n    initialValues: {\n      name: person.get('name'),\n      rank: person.getIn(['rank', '_id']),\n      platoon: person.getIn(['platoon', '_id'])\n    },\n    validationSchema: EditFormSchema,\n    onSubmit: handleSubmit\n  });\n  return (\n    <Form onSubmit={formik.handleSubmit}>\n      <FormGroup>\n        <Label for=\"nameInput\">Name</Label>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          id=\"nameInput\"\n          placeholder=\"John\"\n          invalid={\n            formik.touched.name &&\n            formik.errors.name &&\n            formik.errors.name !== ''\n          }\n          value={formik.values.name}\n          onChange={formik.handleChange}\n          disabled={isUpdating}\n        />\n        {formik.touched.name && formik.errors.name ? (\n          <FormFeedback>{formik.errors.name}</FormFeedback>\n        ) : null}\n      </FormGroup>\n      <FormGroup>\n        <Label for=\"rankSelect\">Rank</Label>\n        <Input\n          type=\"select\"\n          name=\"rank\"\n          id=\"rankSelect\"\n          invalid={\n            formik.touched.rank &&\n            formik.errors.rank &&\n            formik.errors.rank !== ''\n          }\n          onChange={formik.handleChange}\n          value={formik.values.rank}\n          disabled={isUpdating}\n        >\n          {ranks.map(rank => {\n            return (\n              <option value={rank.get('_id')} key={rank.get('_id')}>\n                {rank.get('name')}\n              </option>\n            );\n          })}\n        </Input>\n        {formik.touched.rank && formik.errors.rank ? (\n          <FormFeedback>{formik.errors.rank}</FormFeedback>\n        ) : null}\n      </FormGroup>\n      <FormGroup>\n        <Label for=\"platoonSelect\">Platoon</Label>\n        <Input\n          type=\"select\"\n          name=\"platoon\"\n          id=\"platoonSelect\"\n          disabled={isUpdating}\n          invalid={\n            formik.touched.platoon &&\n            formik.errors.platoon &&\n            formik.errors.platoon !== ''\n          }\n          onChange={formik.handleChange}\n          value={formik.values.platoon}\n        >\n          {platoons.map(platoon => {\n            return (\n              <option value={platoon.get('_id')} key={platoon.get('_id')}>\n                {platoon.get('name')}\n              </option>\n            );\n          })}\n        </Input>\n        {formik.touched.platoon && formik.errors.platoon ? (\n          <FormFeedback>{formik.errors.platoon}</FormFeedback>\n        ) : null}\n      </FormGroup>\n      <Button\n        color=\"primary\"\n        type=\"submit\"\n        className=\"w-100\"\n        disabled={isUpdating}\n      >\n        Update\n      </Button>\n    </Form>\n  );\n};\n\nEditForm.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n  person: PropTypes.instanceOf(Map).isRequired,\n  ranks: PropTypes.instanceOf(List).isRequired,\n  platoons: PropTypes.instanceOf(List).isRequired,\n  isUpdating: PropTypes.bool.isRequired\n};\n\nexport default memo(EditForm);\n","import React, { memo, useCallback, useEffect } from 'react';\nimport {\n  Container,\n  Row,\n  Col,\n  Breadcrumb,\n  BreadcrumbItem,\n  Alert\n} from 'reactstrap';\nimport { Link, Redirect, useParams } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getPerson, getRanks, getPlatoons } from './selectors';\nimport EditForm from '../../../components/personnels/edit/EditForm';\nimport { updatePerson } from './actions';\nimport ActionAlert from '../../../components/commons/ActionAlert';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSuccessModal from '../../../hooks/useSuccessModal';\nimport useReduxPageSelector from '../../../hooks/useReduxPageSelector';\n\nexport function Edit() {\n  const params = useParams();\n  const person = useSelector(state => getPerson(state, params.personnelId));\n\n  /**\n   * initial setup\n   */\n  const pages = ['personnels', 'edit'];\n  const isUpdating = useReduxPageSelector(pages, 'isUpdating');\n  const errors = useReduxPageSelector(pages, 'errors');\n  const prevUpdating = usePrevious(isUpdating);\n  const ranks = useSelector(getRanks);\n  const platoons = useSelector(getPlatoons);\n  const successModal = useSuccessModal('Updated!', 2000);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (prevUpdating && !isUpdating && errors.size === 0) {\n      successModal();\n    }\n  }, [errors.size, isUpdating, prevUpdating, successModal]);\n\n  const handleEdit = useCallback(\n    values => {\n      const personToUpdate = {\n        ...values,\n        personnelId: params.personnelId\n      };\n      dispatch(updatePerson(personToUpdate));\n    },\n    [dispatch, params.personnelId]\n  );\n\n  /**\n   * if there is no person found, redirect back to\n   * personnels page\n   */\n  if (!person || person.size === 0) {\n    return <Redirect to=\"/personnels\" />;\n  }\n\n  return (\n    <Container className=\"py-2\">\n      <Row className=\"justify-content-center align-items-center\">\n        <Col>\n          <Breadcrumb tag=\"nav\" listTag=\"div\">\n            <BreadcrumbItem tag={Link} to=\"/personnels\">\n              Personnels\n            </BreadcrumbItem>\n            <BreadcrumbItem tag=\"span\">Details</BreadcrumbItem>\n            <BreadcrumbItem tag={Link} to={`/personnels/${params.personnelId}`}>\n              {person.get('name')}\n            </BreadcrumbItem>\n            <BreadcrumbItem active tag=\"span\">\n              Edit Details\n            </BreadcrumbItem>\n          </Breadcrumb>\n        </Col>\n      </Row>\n      {errors.size > 0 && (\n        <Row>\n          <Col>\n            <Alert color=\"danger\" className=\"w-100\">\n              {errors.map(error => {\n                return (\n                  <p className=\"mb-0\" key={error}>\n                    {error}\n                  </p>\n                );\n              })}\n            </Alert>\n          </Col>\n        </Row>\n      )}\n      {isUpdating && (\n        <Row>\n          <Col>\n            <ActionAlert name=\"Updating\" />\n          </Col>\n        </Row>\n      )}\n      <Row>\n        <Col>\n          <h1>Editing {person.get('name')}</h1>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <EditForm\n            handleSubmit={handleEdit}\n            person={person}\n            platoons={platoons}\n            ranks={ranks}\n            isUpdating={isUpdating}\n          />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default memo(Edit);\n","import React, { memo } from 'react';\nimport { Switch, Route, useRouteMatch } from 'react-router-dom';\n\nimport Layout from '../shared/AppLayout';\n// SUB-PAGES\nimport All from './all';\nimport Add from './add';\nimport Single from './single';\nimport Edit from './edit';\n\nexport function Personnels() {\n  const { path } = useRouteMatch();\n\n  return (\n    <Layout>\n      <Switch>\n        <Route exact path={path} component={All} />\n        <Route path={`${path}/add`} component={Add} />\n        <Route path={`${path}/:personnelId`} exact component={Single} />\n        <Route path={`${path}/:personnelId/edit`} component={Edit} />\n      </Switch>\n    </Layout>\n  );\n}\n\nexport default memo(Personnels);\n","export { default } from './Personnels';\n"],"sourceRoot":""}