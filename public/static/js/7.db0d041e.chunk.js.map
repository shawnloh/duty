{"version":3,"sources":["hooks/useReduxPageSelector.js","hooks/useDeleteModal.js","hooks/useUpdateModal.js","hooks/useAddModal.js","components/commons/Pagination.jsx","../../react_components/index.js","../../react_components/PaginationBoxView.js","../../react_components/PageView.js","../../react_components/BreakView.js","components/statuses/SingleStatus.jsx","components/statuses/StatusesTable.jsx","pages/statuses/selectors.js","pages/statuses/Statuses.jsx","pages/statuses/index.js"],"names":["useReduxPageSelector","pages","selector","useSelector","storeState","get","reduce","storePages","page","Map","useUpdateModal","dispatch","deleteFunc","useCallback","id","name","a","async","Swal","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","reverseButtons","value","updateFunc","category","input","inputValue","inputPlaceholder","cancelButtonText","inputValidator","result","showModal","addFunc","PaginationComponent","rowsPerPage","totalPosts","setPage","pageNumbers","useMemo","i","Math","ceil","push","handlePageClick","selected","length","aria-label","previousLabel","previousClassName","previousLinkClassName","nextLabel","nextClassName","nextLinkClassName","breakLabel","breakClassName","breakLinkClassName","pageCount","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","pageClassName","pageLinkClassName","activeClassName","activeLinkClassName","disabledClassName","PaginationBoxView","evt","selectedItem","items","index","leftSide","rightSide","breakView","createPageView","key","onClick","initialSelected","props","this","initialPage","disableInitialCallback","extraAriaContext","console","prevProps","forcePage","forwardJump","backwardJump","pageIndex","hrefBuilder","state","ariaLabelBuilder","label","handlePageSelected","bind","href","ariaLabel","previousClasses","nextClasses","previousAriaDisabled","nextAriaDisabled","className","tabIndex","role","onKeyPress","aria-disabled","Component","propTypes","PropTypes","func","defaultProps","PageView","ariaCurrent","aria-current","isRequired","BreakView","memo","status","handleUpdate","handleDelete","updateStatus","deleteStatus","Button","color","statuses","Table","striped","responsive","style","width","map","getStatuses","createSelector","ids","byStatusIds","useState","useDispatch","errors","actionInProgress","handleAdd","useAddModal","addStatus","useDeleteModal","lastIndex","firstIndex","shownStatuses","slice","Helmet","Container","size","Row","Col","Alert","error","Spinner","xs","Pagination"],"mappings":"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","file":"static/js/7.db0d041e.chunk.js","sourcesContent":["import { useSelector } from 'react-redux';\nimport { Map } from 'immutable';\n\nfunction useReduxPageSelector(pages, selector) {\n  const state = useSelector(storeState => {\n    if (typeof pages === 'string') {\n      return storeState.pages[pages].get(selector);\n    }\n    const foundPage = pages.reduce((storePages, page) => {\n      if (storePages && storePages[page] !== 'undefined') {\n        return storePages[page];\n      }\n      return Map();\n    }, storeState.pages);\n\n    return foundPage.get(selector);\n  });\n\n  return state;\n}\n\nexport default useReduxPageSelector;\n","import { useCallback } from 'react';\nimport Swal from 'sweetalert2';\n\nfunction useUpdateModal(dispatch, deleteFunc) {\n  const deleteCallBackModal = useCallback(\n    (id, name) => {\n      async function showModal() {\n        const result = await Swal.fire({\n          title: `Are you sure you want to delete ${name}?`,\n          text: \"You won't be able to revert this!\",\n          icon: 'warning',\n          showCancelButton: true,\n          confirmButtonColor: '#dc3545',\n          cancelButtonColor: '#3085d6',\n          confirmButtonText: 'Yes, delete it!',\n          reverseButtons: true\n        });\n        if (result.value) {\n          dispatch(deleteFunc(id));\n        }\n      }\n      showModal();\n    },\n    [deleteFunc, dispatch]\n  );\n  return deleteCallBackModal;\n}\n\nexport default useUpdateModal;\n","import { useCallback } from 'react';\nimport Swal from 'sweetalert2';\n\nfunction useUpdateModal(dispatch, updateFunc, category) {\n  const updateCallBackModal = useCallback(\n    (id, name) => {\n      async function showModal() {\n        const result = await Swal.fire({\n          title: `Enter a new ${category} name for ${name}`,\n          input: 'text',\n          inputValue: '',\n          inputPlaceholder: name,\n          showCancelButton: true,\n          confirmButtonText: 'Update',\n          confirmButtonColor: '#28a745',\n          cancelButtonText: 'Cancel',\n          cancelButtonColor: '#007bff',\n          reverseButtons: true,\n          inputValidator: value => {\n            if (!value) {\n              return `Updating a ${category} name cannot be empty`;\n            }\n            return null;\n          }\n        });\n        if (result.value) {\n          dispatch(updateFunc(id, result.value));\n        }\n      }\n      showModal();\n    },\n    [category, dispatch, updateFunc]\n  );\n  return updateCallBackModal;\n}\n\nexport default useUpdateModal;\n","import { useCallback } from 'react';\nimport Swal from 'sweetalert2';\n\nfunction useUpdateModal(dispatch, addFunc, category) {\n  const deleteCallBackModal = useCallback(() => {\n    async function showModal() {\n      const result = await Swal.fire({\n        title: `Enter a new ${category} name`,\n        input: 'text',\n        inputValue: '',\n        showCancelButton: true,\n        confirmButtonText: 'Add',\n        confirmButtonColor: '#28a745',\n        cancelButtonText: 'Cancel',\n        cancelButtonColor: '#007bff',\n        reverseButtons: true,\n        inputValidator: value => {\n          if (!value) {\n            return 'Name cannot be empty';\n          }\n          return null;\n        }\n      });\n      if (result.value) {\n        dispatch(addFunc(result.value));\n      }\n    }\n    showModal();\n  }, [addFunc, category, dispatch]);\n\n  return deleteCallBackModal;\n}\n\nexport default useUpdateModal;\n","import React, { useMemo, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactPaginate from 'react-paginate';\nimport './pagination.css';\n\nconst PaginationComponent = ({ rowsPerPage, totalPosts, setPage }) => {\n  const pageNumbers = useMemo(() => {\n    const page = [];\n    for (let i = 1; i <= Math.ceil(totalPosts / rowsPerPage); i += 1) {\n      page.push(i);\n    }\n    return page;\n  }, [totalPosts, rowsPerPage]);\n  const handlePageClick = useCallback(\n    ({ selected }) => {\n      const pageNumber = selected + 1;\n      setPage(pageNumber);\n    },\n    [setPage]\n  );\n\n  if (pageNumbers.length === 0) {\n    return null;\n  }\n\n  return (\n    <nav aria-label=\"Page pagination\">\n      <ReactPaginate\n        previousLabel=\"&laquo;\"\n        previousClassName=\"page-item\"\n        previousLinkClassName=\"page-link\"\n        nextLabel=\"&raquo;\"\n        nextClassName=\"page-item\"\n        nextLinkClassName=\"page-link\"\n        breakLabel=\"...\"\n        breakClassName=\"page-item\"\n        breakLinkClassName=\"page-link\"\n        pageCount={pageNumbers.length}\n        marginPagesDisplayed={2}\n        pageRangeDisplayed={5}\n        onPageChange={handlePageClick}\n        containerClassName=\"pagination justify-content-center\"\n        pageClassName=\"page-item\"\n        pageLinkClassName=\"page-link\"\n        activeClassName=\"page-item active\"\n        activeLinkClassName=\"page-item active\"\n        disabledClassName=\"page-item disabled\"\n      />\n    </nav>\n  );\n};\n\nPaginationComponent.propTypes = {\n  rowsPerPage: PropTypes.number.isRequired,\n  totalPosts: PropTypes.number.isRequired,\n  setPage: PropTypes.func.isRequired\n};\n\nexport default PaginationComponent;\n","import PaginationBoxView from './PaginationBoxView';\n\nexport default PaginationBoxView;\n","'use strict';\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PageView from './PageView';\nimport BreakView from './BreakView';\n\nexport default class PaginationBoxView extends Component {\n  static propTypes = {\n    pageCount: PropTypes.number.isRequired,\n    pageRangeDisplayed: PropTypes.number.isRequired,\n    marginPagesDisplayed: PropTypes.number.isRequired,\n    previousLabel: PropTypes.node,\n    nextLabel: PropTypes.node,\n    breakLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    hrefBuilder: PropTypes.func,\n    onPageChange: PropTypes.func,\n    initialPage: PropTypes.number,\n    forcePage: PropTypes.number,\n    disableInitialCallback: PropTypes.bool,\n    containerClassName: PropTypes.string,\n    pageClassName: PropTypes.string,\n    pageLinkClassName: PropTypes.string,\n    activeClassName: PropTypes.string,\n    activeLinkClassName: PropTypes.string,\n    previousClassName: PropTypes.string,\n    nextClassName: PropTypes.string,\n    previousLinkClassName: PropTypes.string,\n    nextLinkClassName: PropTypes.string,\n    disabledClassName: PropTypes.string,\n    breakClassName: PropTypes.string,\n    breakLinkClassName: PropTypes.string,\n    extraAriaContext: PropTypes.string,\n    ariaLabelBuilder: PropTypes.func,\n  };\n\n  static defaultProps = {\n    pageCount: 10,\n    pageRangeDisplayed: 2,\n    marginPagesDisplayed: 3,\n    activeClassName: 'selected',\n    previousClassName: 'previous',\n    nextClassName: 'next',\n    previousLabel: 'Previous',\n    nextLabel: 'Next',\n    breakLabel: '...',\n    disabledClassName: 'disabled',\n    disableInitialCallback: false,\n  };\n\n  constructor(props) {\n    super(props);\n\n    let initialSelected;\n    if (props.initialPage) {\n      initialSelected = props.initialPage;\n    } else if (props.forcePage) {\n      initialSelected = props.forcePage;\n    } else {\n      initialSelected = 0;\n    }\n\n    this.state = {\n      selected: initialSelected,\n    };\n  }\n\n  componentDidMount() {\n    const {\n      initialPage,\n      disableInitialCallback,\n      extraAriaContext,\n    } = this.props;\n    // Call the callback with the initialPage item:\n    if (typeof initialPage !== 'undefined' && !disableInitialCallback) {\n      this.callCallback(initialPage);\n    }\n\n    if (extraAriaContext) {\n      console.warn(\n        'DEPRECATED (react-paginate): The extraAriaContext prop is deprecated. You should now use the ariaLabelBuilder instead.'\n      );\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      typeof this.props.forcePage !== 'undefined' &&\n      this.props.forcePage !== prevProps.forcePage\n    ) {\n      this.setState({ selected: this.props.forcePage });\n    }\n  }\n\n  handlePreviousPage = evt => {\n    const { selected } = this.state;\n    evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);\n    if (selected > 0) {\n      this.handlePageSelected(selected - 1, evt);\n    }\n  };\n\n  handleNextPage = evt => {\n    const { selected } = this.state;\n    const { pageCount } = this.props;\n\n    evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);\n    if (selected < pageCount - 1) {\n      this.handlePageSelected(selected + 1, evt);\n    }\n  };\n\n  handlePageSelected = (selected, evt) => {\n    evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);\n\n    if (this.state.selected === selected) return;\n\n    this.setState({ selected: selected });\n\n    // Call the callback with the new selected item:\n    this.callCallback(selected);\n  };\n\n  getForwardJump() {\n    const { selected } = this.state;\n    const { pageCount, pageRangeDisplayed } = this.props;\n\n    const forwardJump = selected + pageRangeDisplayed;\n    return forwardJump >= pageCount ? pageCount - 1 : forwardJump;\n  }\n\n  getBackwardJump() {\n    const { selected } = this.state;\n    const { pageRangeDisplayed } = this.props;\n\n    const backwardJump = selected - pageRangeDisplayed;\n    return backwardJump < 0 ? 0 : backwardJump;\n  }\n\n  handleBreakClick = (index, evt) => {\n    evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);\n\n    const { selected } = this.state;\n\n    this.handlePageSelected(\n      selected < index ? this.getForwardJump() : this.getBackwardJump(),\n      evt\n    );\n  };\n\n  hrefBuilder(pageIndex) {\n    const { hrefBuilder, pageCount } = this.props;\n    if (\n      hrefBuilder &&\n      pageIndex !== this.state.selected &&\n      pageIndex >= 0 &&\n      pageIndex < pageCount\n    ) {\n      return hrefBuilder(pageIndex + 1);\n    }\n  }\n\n  ariaLabelBuilder(pageIndex) {\n    const selected = pageIndex === this.state.selected;\n    if (\n      this.props.ariaLabelBuilder &&\n      pageIndex >= 0 &&\n      pageIndex < this.props.pageCount\n    ) {\n      let label = this.props.ariaLabelBuilder(pageIndex + 1, selected);\n      // DEPRECATED: The extraAriaContext prop was used to add additional context\n      // to the aria-label. Users should now use the ariaLabelBuilder instead.\n      if (this.props.extraAriaContext && !selected) {\n        label = label + ' ' + this.props.extraAriaContext;\n      }\n      return label;\n    }\n  }\n\n  callCallback = selectedItem => {\n    if (\n      typeof this.props.onPageChange !== 'undefined' &&\n      typeof this.props.onPageChange === 'function'\n    ) {\n      this.props.onPageChange({ selected: selectedItem });\n    }\n  };\n\n  getPageElement(index) {\n    const { selected } = this.state;\n    const {\n      pageClassName,\n      pageLinkClassName,\n      activeClassName,\n      activeLinkClassName,\n      extraAriaContext,\n    } = this.props;\n\n    return (\n      <PageView\n        key={index}\n        onClick={this.handlePageSelected.bind(null, index)}\n        selected={selected === index}\n        pageClassName={pageClassName}\n        pageLinkClassName={pageLinkClassName}\n        activeClassName={activeClassName}\n        activeLinkClassName={activeLinkClassName}\n        extraAriaContext={extraAriaContext}\n        href={this.hrefBuilder(index)}\n        ariaLabel={this.ariaLabelBuilder(index)}\n        page={index + 1}\n      />\n    );\n  }\n\n  pagination = () => {\n    const items = [];\n    const {\n      pageRangeDisplayed,\n      pageCount,\n      marginPagesDisplayed,\n      breakLabel,\n      breakClassName,\n      breakLinkClassName,\n    } = this.props;\n\n    const { selected } = this.state;\n\n    if (pageCount <= pageRangeDisplayed) {\n      for (let index = 0; index < pageCount; index++) {\n        items.push(this.getPageElement(index));\n      }\n    } else {\n      let leftSide = pageRangeDisplayed / 2;\n      let rightSide = pageRangeDisplayed - leftSide;\n\n      // If the selected page index is on the default right side of the pagination,\n      // we consider that the new right side is made up of it (= only one break element).\n      // If the selected page index is on the default left side of the pagination,\n      // we consider that the new left side is made up of it (= only one break element).\n      if (selected > pageCount - pageRangeDisplayed / 2) {\n        rightSide = pageCount - selected;\n        leftSide = pageRangeDisplayed - rightSide;\n      } else if (selected < pageRangeDisplayed / 2) {\n        leftSide = selected;\n        rightSide = pageRangeDisplayed - leftSide;\n      }\n\n      let index;\n      let page;\n      let breakView;\n      let createPageView = index => this.getPageElement(index);\n\n      for (index = 0; index < pageCount; index++) {\n        page = index + 1;\n\n        // If the page index is lower than the margin defined,\n        // the page has to be displayed on the left side of\n        // the pagination.\n        if (page <= marginPagesDisplayed) {\n          items.push(createPageView(index));\n          continue;\n        }\n\n        // If the page index is greater than the page count\n        // minus the margin defined, the page has to be\n        // displayed on the right side of the pagination.\n        if (page > pageCount - marginPagesDisplayed) {\n          items.push(createPageView(index));\n          continue;\n        }\n\n        // If the page index is near the selected page index\n        // and inside the defined range (pageRangeDisplayed)\n        // we have to display it (it will create the center\n        // part of the pagination).\n        if (index >= selected - leftSide && index <= selected + rightSide) {\n          items.push(createPageView(index));\n          continue;\n        }\n\n        // If the page index doesn't meet any of the conditions above,\n        // we check if the last item of the current \"items\" array\n        // is a break element. If not, we add a break element, else,\n        // we do nothing (because we don't want to display the page).\n        if (breakLabel && items[items.length - 1] !== breakView) {\n          breakView = (\n            <BreakView\n              key={index}\n              breakLabel={breakLabel}\n              breakClassName={breakClassName}\n              breakLinkClassName={breakLinkClassName}\n              onClick={this.handleBreakClick.bind(null, index)}\n            />\n          );\n          items.push(breakView);\n        }\n      }\n    }\n\n    return items;\n  };\n\n  render() {\n    const {\n      disabledClassName,\n      previousClassName,\n      nextClassName,\n      pageCount,\n      containerClassName,\n      previousLinkClassName,\n      previousLabel,\n      nextLinkClassName,\n      nextLabel,\n    } = this.props;\n\n    const { selected } = this.state;\n\n    const previousClasses =\n      previousClassName + (selected === 0 ? ` ${disabledClassName}` : '');\n    const nextClasses =\n      nextClassName +\n      (selected === pageCount - 1 ? ` ${disabledClassName}` : '');\n\n    const previousAriaDisabled = selected === 0 ? 'true' : 'false';\n    const nextAriaDisabled = selected === pageCount - 1 ? 'true' : 'false';\n\n    return (\n      <ul className={containerClassName}>\n        <li className={previousClasses}>\n          <a\n            onClick={this.handlePreviousPage}\n            className={previousLinkClassName}\n            href={this.hrefBuilder(selected - 1)}\n            tabIndex=\"0\"\n            role=\"button\"\n            onKeyPress={this.handlePreviousPage}\n            aria-disabled={previousAriaDisabled}\n          >\n            {previousLabel}\n          </a>\n        </li>\n\n        {this.pagination()}\n\n        <li className={nextClasses}>\n          <a\n            onClick={this.handleNextPage}\n            className={nextLinkClassName}\n            href={this.hrefBuilder(selected + 1)}\n            tabIndex=\"0\"\n            role=\"button\"\n            onKeyPress={this.handleNextPage}\n            aria-disabled={nextAriaDisabled}\n          >\n            {nextLabel}\n          </a>\n        </li>\n      </ul>\n    );\n  }\n}\n","'use strict';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst PageView = props => {\n  let pageClassName = props.pageClassName;\n  let pageLinkClassName = props.pageLinkClassName;\n\n  const onClick = props.onClick;\n  const href = props.href;\n  let ariaLabel =\n    props.ariaLabel ||\n    'Page ' +\n      props.page +\n      (props.extraAriaContext ? ' ' + props.extraAriaContext : '');\n  let ariaCurrent = null;\n\n  if (props.selected) {\n    ariaCurrent = 'page';\n\n    ariaLabel =\n      props.ariaLabel || 'Page ' + props.page + ' is your current page';\n\n    if (typeof pageClassName !== 'undefined') {\n      pageClassName = pageClassName + ' ' + props.activeClassName;\n    } else {\n      pageClassName = props.activeClassName;\n    }\n\n    if (typeof pageLinkClassName !== 'undefined') {\n      if (typeof props.activeLinkClassName !== 'undefined') {\n        pageLinkClassName = pageLinkClassName + ' ' + props.activeLinkClassName;\n      }\n    } else {\n      pageLinkClassName = props.activeLinkClassName;\n    }\n  }\n\n  return (\n    <li className={pageClassName}>\n      <a\n        onClick={onClick}\n        role=\"button\"\n        className={pageLinkClassName}\n        href={href}\n        tabIndex=\"0\"\n        aria-label={ariaLabel}\n        aria-current={ariaCurrent}\n        onKeyPress={onClick}\n      >\n        {props.page}\n      </a>\n    </li>\n  );\n};\n\nPageView.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  selected: PropTypes.bool.isRequired,\n  pageClassName: PropTypes.string,\n  pageLinkClassName: PropTypes.string,\n  activeClassName: PropTypes.string,\n  activeLinkClassName: PropTypes.string,\n  extraAriaContext: PropTypes.string,\n  href: PropTypes.string,\n  ariaLabel: PropTypes.string,\n  page: PropTypes.number.isRequired,\n};\n\nexport default PageView;\n","'use strict';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst BreakView = props => {\n  const { breakLabel, breakClassName, breakLinkClassName, onClick } = props;\n  const className = breakClassName || 'break';\n\n  return (\n    <li className={className}>\n      <a\n        className={breakLinkClassName}\n        onClick={onClick}\n        role=\"button\"\n        tabIndex=\"0\"\n        onKeyPress={onClick}\n      >\n        {breakLabel}\n      </a>\n    </li>\n  );\n};\n\nBreakView.propTypes = {\n  breakLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  breakClassName: PropTypes.string,\n  breakLinkClassName: PropTypes.string,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default BreakView;\n","import React, { memo, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'reactstrap';\nimport { Map } from 'immutable';\n\nfunction SingleStatus({ status, handleUpdate, handleDelete }) {\n  const id = status.get('_id');\n  const name = status.get('name');\n\n  const updateStatus = useCallback(() => {\n    handleUpdate(id, name);\n  }, [handleUpdate, id, name]);\n\n  const deleteStatus = useCallback(() => {\n    handleDelete(id, name);\n  }, [handleDelete, id, name]);\n\n  return (\n    <tr>\n      <td className=\"text-center\">{name}</td>\n      <td className=\"text-center\">\n        <Button color=\"primary\" onClick={updateStatus}>\n          Edit\n        </Button>{' '}\n        <Button onClick={deleteStatus} color=\"danger\">\n          Delete\n        </Button>\n      </td>\n    </tr>\n  );\n}\n\nSingleStatus.propTypes = {\n  status: PropTypes.instanceOf(Map).isRequired,\n  handleUpdate: PropTypes.func.isRequired,\n  handleDelete: PropTypes.func.isRequired\n};\n\nexport default memo(SingleStatus);\n","import React, { memo } from 'react';\nimport { Table } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport { List } from 'immutable';\nimport SingleStatus from './SingleStatus';\n\nconst StatusesTable = ({ statuses, handleUpdate, handleDelete }) => {\n  return (\n    <Table striped responsive>\n      <thead>\n        <tr>\n          <th style={{ width: '50%' }} className=\"text-center\">\n            Name\n          </th>\n          <th className=\"text-center\">Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        {statuses.map(status => (\n          <SingleStatus\n            key={status.get('_id')}\n            status={status}\n            handleDelete={handleDelete}\n            handleUpdate={handleUpdate}\n          />\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nStatusesTable.propTypes = {\n  statuses: PropTypes.instanceOf(List).isRequired,\n  handleUpdate: PropTypes.func.isRequired,\n  handleDelete: PropTypes.func.isRequired\n};\n\nexport default memo(StatusesTable);\n","import { createSelector } from 'reselect';\n\nconst statusIds = state => state.statuses.get('ids');\nconst allStatuses = state => state.statuses.get('statuses');\nconst getStatuses = createSelector(statusIds, allStatuses, (ids, byStatusIds) =>\n  ids.map(id => byStatusIds.get(id))\n);\n\nexport { getStatuses };\n\nexport default getStatuses;\n","import React, { memo, useState } from 'react';\nimport { Container, Col, Row, Button, Alert, Spinner } from 'reactstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\n\nimport useUpdateModal from '../../hooks/useUpdateModal';\nimport useAddModal from '../../hooks/useAddModal';\nimport useDeleteModal from '../../hooks/useDeleteModal';\nimport useReduxPageSelector from '../../hooks/useReduxPageSelector';\n\nimport Layout from '../shared/AppLayout';\nimport StatusesTable from '../../components/statuses/StatusesTable';\nimport Pagination from '../../components/commons/Pagination';\n\nimport { getStatuses } from './selectors';\nimport { addStatus, deleteStatus, updateStatus } from './actions';\n\nexport function Statuses() {\n  const [rowsPerPage] = useState(10);\n  const [page, setPage] = useState(1);\n\n  const dispatch = useDispatch();\n  const statuses = useSelector(getStatuses);\n  const errors = useReduxPageSelector('statuses', 'errors');\n  const actionInProgress = useReduxPageSelector('statuses', 'actionInProgress');\n\n  const handleAdd = useAddModal(dispatch, addStatus, 'status');\n  const handleUpdate = useUpdateModal(dispatch, updateStatus, 'status');\n  const handleDelete = useDeleteModal(dispatch, deleteStatus);\n\n  const lastIndex = page * rowsPerPage;\n  const firstIndex = lastIndex - rowsPerPage;\n  const shownStatuses = statuses.slice(firstIndex, lastIndex);\n\n  return (\n    <Layout>\n      <Helmet>\n        <title>Statuses</title>\n      </Helmet>\n      <Container className=\"py-2\">\n        {errors.size > 0 && (\n          <Row>\n            <Col>\n              <Alert color=\"danger\" className=\"w-100\">\n                {errors.map(error => {\n                  return (\n                    <p className=\"mb-0\" key={error}>\n                      {error}\n                    </p>\n                  );\n                })}\n              </Alert>\n            </Col>\n          </Row>\n        )}\n        {actionInProgress !== 0 && (\n          <Row>\n            <Col>\n              <Alert color=\"primary\" className=\"w-100\">\n                {actionInProgress} action(s) in progress{' '}\n                <Spinner color=\"primary\" size=\"sm\" />\n              </Alert>\n            </Col>\n          </Row>\n        )}\n        <Row className=\"justify-content-center align-items-center\">\n          <Col xs=\"9\">\n            <h1>Statuses</h1>\n          </Col>\n          <Col xs=\"3\" className=\"d-flex justify-content-end\">\n            <Button color=\"success\" size=\"md\" onClick={handleAdd}>\n              Add\n            </Button>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <StatusesTable\n              handleUpdate={handleUpdate}\n              handleDelete={handleDelete}\n              statuses={shownStatuses}\n            />\n          </Col>\n        </Row>\n        <Row className=\"justify-content-center align-items-center\">\n          <Col>\n            <Pagination\n              rowsPerPage={rowsPerPage}\n              setPage={setPage}\n              totalPosts={statuses.size}\n            />\n          </Col>\n        </Row>\n      </Container>\n    </Layout>\n  );\n}\n\nexport default memo(Statuses);\n","export { default } from './Statuses';\n"],"sourceRoot":""}